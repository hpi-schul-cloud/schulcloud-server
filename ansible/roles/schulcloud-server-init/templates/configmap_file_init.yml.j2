apiVersion: v1
kind: ConfigMap
metadata:
  name: api-init-file
  namespace: {{ NAMESPACE }}
  labels:
    app: api-deployment
data:
  update.sh: |
    #! /bin/bash
    echo "seeding database"
    curl --retry 360 --retry-all-errors --retry-delay 10 -X POST 'http://mgmt-svc:3333/api/management/database/seed?with-indexes=true'

    get_secret() {
      local plainText="$1"
      local url="http://mgmt-svc:3333/api/management/database/encrypt-plain-text"

      if [[ -z "$plainText" ]]; then
        echo "Error: No plainText argument provided."
        return 1
      fi

      # Use curl to capture both the response body and status code
      local response
      local http_code
      response=$(curl -s -w "\n%{http_code}" -X POST "$url" \
        -H "Content-Type: text/plain" \
        --data "$plainText")

      # Split the response into body and status code
      http_code=$(echo "$response" | tail -n 1)
      response_body=$(echo "$response" | head -n -1)

      # Check if the response status code is 200
      if [[ "$http_code" -ne 200 ]]; then
        echo "Error: Request failed with status code $http_code."
        return 1
      fi

      # Return the response body (presumably the secret)
      echo "$response_body"
      return 0
    }
    # Below is a series of a MongoDB-data initializations, meant for the development and testing
    # purposes on various dev environments - most of them will only work there.

    # Test OIDC system configuration used in conjunction with OIDCMOCK deployment.
    OIDCMOCK_CLIENT_SECRET=$(get_secret $OIDCMOCK__CLIENT_SECRET)
    # Test LDAP server (deployed in the sc-common namespace) configuration (stored in the 'systems' collection).
    SEARCH_USER_PASSWORD=$(get_secret $SC_COMMON_LDAP_PASSWORD)
    mongosh $DATABASE__URL --quiet --eval 'db.systems.insertMany([
    {
      "type" : "ldap",
      "alias" : "schoolOne0",
      "provisioningStrategy": "oidc",
      "displayName": "SSO LDAP School One 0",
      "ldapConfig" : {
        "active" : true,
        "federalState": ObjectId("0000b186816abba584714c56"),
        "url" : "ldap://sc-openldap-single-svc.sc-common.svc.cluster.local:389",
        "rootPath" : "o=schoolOne0,dc=de,dc=example,dc=org",
        "searchUser" : "cn=admin,dc=example,dc=org",
        "searchUserPassword" : "'$SEARCH_USER_PASSWORD'",
        "provider" : "general",
        "providerOptions" : {
          "schoolName" : "School One 0",
          "userPathAdditions" : "ou=users",
          "classPathAdditions" : "ou=groups",
          "roleType" : "group",
          "userAttributeNameMapping" : {
            "givenName" : "givenName",
            "sn" : "sn",
            "uuid" : "uuid",
            "dn" : "dn",
            "uid" : "uid",
            "mail" : "mail",
            "role" : "memberOf"
          },
          "roleAttributeNameMapping" : {
            "roleStudent" : "cn=ROLE_STUDENT,ou=roles,o=schoolOne0,dc=de,dc=example,dc=org",
            "roleTeacher": "cn=ROLE_TEACHER,ou=roles,o=schoolOne0,dc=de,dc=example,dc=org;;cn=ROLE_SUBSTITUTE_TEACHER,ou=roles,o=schoolOne0,dc=de,dc=example,dc=org",
            "roleAdmin" : "cn=ROLE_ADMIN,ou=roles,o=schoolOne0,dc=de,dc=example,dc=org",
            "roleNoSc" : "cn=ROLE_NBC_EXCLUDE,ou=roles,o=schoolOne0,dc=de,dc=example,dc=org"
          },
          "classAttributeNameMapping" : {
            "description" : "description",
            "dn" : "dn",
            "uniqueMember" : "member"
          }
        }
      },
      "oidcConfig": {
        "idpHint": "schoolOne0",
        "clientId": "'${OIDCMOCK__CLIENT_ID}'",
        "clientSecret": "'${OIDCMOCK_CLIENT_SECRET}'",
        "authorizationUrl": "'${OIDCMOCK__BASE_URL}'/connect/authorize",
        "tokenUrl": "'${OIDCMOCK__BASE_URL}'/connect/token",
        "logoutUrl": "'${OIDCMOCK__BASE_URL}'/connect/endsession",
        "userinfoUrl": "'${OIDCMOCK__BASE_URL}'/connect/userinfo",
        "defaultScopes": "openid profile email"
      }
    },
    {
      "type" : "ldap",
      "alias" : "schoolOne1",
      "ldapConfig" : {
        "active" : true,
        "federalState": ObjectId("0000b186816abba584714c54"),
        "url" : "ldap://sc-openldap-single-svc.sc-common.svc.cluster.local:389",
        "rootPath" : "o=schoolOne1,dc=de,dc=example,dc=org",
        "searchUser" : "cn=admin,dc=example,dc=org",
        "searchUserPassword" : "'$SEARCH_USER_PASSWORD'",
        "provider" : "general",
        "providerOptions" : {
          "schoolName" : "School One 1",
          "userPathAdditions" : "ou=users",
          "roleType" : "group",
          "userAttributeNameMapping" : {
            "givenName" : "givenName",
            "sn" : "sn",
            "uuid" : "uuid",
            "dn" : "dn",
            "uid" : "uid",
            "mail" : "mail",
            "role" : "memberOf"
          },
          "roleAttributeNameMapping" : {
            "roleStudent" : "cn=ROLE_STUDENT,ou=roles,o=schoolOne1,dc=de,dc=example,dc=org",
            "roleTeacher": "cn=ROLE_TEACHER,ou=roles,o=schoolOne1,dc=de,dc=example,dc=org;;cn=ROLE_SUBSTITUTE_TEACHER,ou=roles,o=schoolOne1,dc=de,dc=example,dc=org",
            "roleAdmin" : "cn=ROLE_ADMIN,ou=roles,o=schoolOne1,dc=de,dc=example,dc=org",
            "roleNoSc" : "cn=ROLE_NBC_EXCLUDE,ou=roles,o=schoolOne1,dc=de,dc=example,dc=org"
          },
          "classAttributeNameMapping" : {
            "dn" : "dn"
          }
        }
      }
    }]);'

    # Below is the IDM setup used for the development and testing
    # It includes initialization of the OIDCMOCK based login and corresponding LDAP federation
    IDM_ACTIVE={{ WITH_ERWINIDM }}
    if [[ ${IDM_ACTIVE,,} == true ]]
    then
      curl --retry 360 --retry-all-errors --retry-delay 10 -X POST 'http://mgmt-svc:3333/api/management/idm/seed'
    else
      echo "Skip IDM initialization"
    fi

    # AWS S3 storage configuration (stored in the 'storageproviders' collection).
    mongosh $DATABASE__URL --quiet --eval 'db.storageproviders.insertOne( {
                                       "isShared" : true,
                                       "region" : "eu-central-1",
                                       "type" : "S3",
                                       "endpointUrl" : "https://storage-{{ DOMAIN }}",
                                       "accessKeyId" : "'$AWS_ACCESS_KEY'",
                                       "secretAccessKey" : "'$AWS_SECRET_ACCESS_KEY_AES'",
                                       "maxBuckets" : 999999,
                                       "freeBuckets" : 999999,
                                       "createdAt" : ISODate("2021-07-16T09:03:18.536Z"),
                                       "updatedAt" : ISODate("2021-07-16T09:03:18.536Z")
                                     } );'

    # Re-assign the k8s namespace name to a shorter variable to make the code a little bit more readable.
    NS=$K8S_NAMESPACE

    # ========== Start of the Test BRB Univention LDAP system (also used on the REF BRB) configuration section.

    # This is currently performed for any 'brb-*' namespace ('brb-main' for example).

    if [ "$SC_THEME" = "brb" ]; then
        UNIVENTION_LDAP_SYSTEM_ID=621beef78ec63ea12a3adae6
        UNIVENTION_LDAP_FEDERAL_STATE_ID=0000b186816abba584714c53

        # Encrypt LDAP server's search user password.
        UNIVENTION_LDAP_SEARCH_USER_PASSWORD=$(get_secret $UNIVENTION_LDAP_SEARCH_USER_PASSWORD)

        # Add (or replace) document with the test BRB Univention LDAP system configuration.
        mongosh $DATABASE__URL --quiet --eval 'db.systems.replaceOne(
            {
                "_id": ObjectId("'$UNIVENTION_LDAP_SYSTEM_ID'"),
            },
            {
                "_id": ObjectId("'$UNIVENTION_LDAP_SYSTEM_ID'"),
                "alias": "TEST BRB UNIVENTION LDAP",
                "ldapConfig": {
                    "active": true,
                    "federalState": ObjectId("'$UNIVENTION_LDAP_FEDERAL_STATE_ID'"),
                    "url": "'$UNIVENTION_LDAP_URL'",
                    "rootPath": "'$UNIVENTION_LDAP_ROOT_PATH'",
                    "searchUser": "'$UNIVENTION_LDAP_SEARCH_USER'",
                    "searchUserPassword": "'$UNIVENTION_LDAP_SEARCH_USER_PASSWORD'",
                    "provider": "univention",
                    "providerOptions": {
                        "userAttributeNameMapping": {},
                        "roleAttributeNameMapping": {},
                        "classAttributeNameMapping": {}
                    }
                },
                "type": "ldap"
            },
            {
                "upsert": true
            }
        );'
    fi

    # ========== End of the Test BRB Univention LDAP system (also used on the REF BRB) configuration section.

    # ========== Start of the Bettermarks tool configuration section.

    # This is currently performed only for the following namespaces on dev for each tenant nbc and brb:
    #   - 'bettermarks-test'
    #   - 'main'
    # the first two being the testing environments for the nbc instances
    # and the last two being the testing environments for the brb instances.

    # The Bettermarks URL (entrypoint) and client secret can be shared among the different environments,
    # but to not complicate the current configuration, they are configured separately for each environment.

    if [ -n "$NS" ]; then
        # Set the BETTERMARKS_CLIENT_SECRET and BETTERMARKS_URL variables values according to the k8s namespace.
        if [ "$NS" = "main" ]; then
            BETTERMARKS_CLIENT_SECRET=$BETTERMARKS_MAIN_CLIENT_SECRET
            BETTERMARKS_URL=$BETTERMARKS_MAIN_ENTRYPOINT
        elif [ "$NS" = "bettermarks-test" ]; then
            BETTERMARKS_CLIENT_SECRET=$BETTERMARKS_BETTERMARKS_TEST_CLIENT_SECRET
            BETTERMARKS_URL=$BETTERMARKS_BETTERMARKS_TEST_ENTRYPOINT
        else
            # Print some friendly message for any other namespace that's not supported.
            echo "Sorry, Bettermarks cannot be configured on the '$NS' namespace, omitting the config data init."
        fi

        # Perform the final Bettermarks config data init if client secret and URL has been properly set.
        if [ -n "$BETTERMARKS_CLIENT_SECRET" ] && [ -n "$BETTERMARKS_URL" ] && [ -n "$BETTERMARKS_REDIRECT_DOMAIN" ]; then
            # The two steps below (Hydra call and MongoDB insert) were added to automate the actions performed inside
            # the server when Bettermarks' OAuth client configuration is added manually in SuperHero Dashboard.

            # Add Bettermarks' OAuth client configuration in Hydra.
            curl --retry 360 --retry-all-errors --retry-delay 10 \
                  -H 'X-Forwarded-Proto: https' \
                  -X POST $HYDRA_URI/clients \
                  -d '{
                        "client_name": "bettermarks",
                        "client_id": "bettermarks",
                        "client_secret": "'$BETTERMARKS_CLIENT_SECRET'",
                        "scope":"openid offline",
                        "token_endpoint_auth_method":"client_secret_post",
                        "redirect_uris": [
                          "https://'$BETTERMARKS_REDIRECT_DOMAIN'/v1.0/schulcloud/oauth/callback",
                          "https://'$BETTERMARKS_REDIRECT_DOMAIN'/auth/callback",
                          "https://'$BETTERMARKS_REDIRECT_DOMAIN'/auth/oidc/callback"
                        ],
                        "subject_type":"pairwise"
                      }'

            # Add Bettermarks' tools configuration as an external tool
            # (stored in the 'external-tools' collection) that uses OAuth.
            mongosh $DATABASE__URL --quiet --eval 'db.getCollection("external-tools").replaceOne(
                {
                  "name": "bettermarks",
                  "config_type": "oauth2"
                },
                {
                  "name": "bettermarks",
                  "url": "'$BETTERMARKS_URL'",
                  "logoUrl": "'$BETTERMARKS_LOGO_URL'",
                  "config_type": "oauth2",
                  "config_baseUrl": "'$BETTERMARKS_URL'",
                  "config_clientId": "'$BETTERMARKS_OAUTH_CLIENT_ID'",
                  "config_skipConsent": false,
                  "parameters": [],
                  "isHidden": false,
                  "openNewTab": true,
                  "createdAt": new Date(),
                  "updatedAt": new Date(),
                  "version": 1
                },
                {
                  "upsert": true
                }
            );'

            echo "Bettermarks config data init performed successfully."
        else
          echo "Bettermarks variables not provided, omitting the config data init."
        fi
    fi

    # ========== End of the Bettermarks tool configuration section.

    # ========== Start of the Nextcloud configuration section.

    # This configures nextcloud in superhero dashboard as oauth2 tool and also in hydra
    if [ -n "$NEXTCLOUD_CLIENT_SECRET" ] && [ -n "$NEXTCLOUD_SOCIALLOGIN_OIDC_INTERNAL_NAME" ]; then
         # Add Nextcloud client in hydra
         echo "POSTing nextcloud to hydra..."
         curl --retry 10 --retry-all-errors --retry-delay 10 \
               -H 'X-Forwarded-Proto: https' \
               -X POST $HYDRA_URI/clients \
               -d '{
                     "client_name": "'$NEXTCLOUD_SOCIALLOGIN_OIDC_INTERNAL_NAME'",
                     "client_id": "'$NEXTCLOUD_CLIENT_ID'",
                     "client_secret": "'$NEXTCLOUD_CLIENT_SECRET'",
                     "scope": "'"$NEXTCLOUD_SCOPES"'",
                     "token_endpoint_auth_method": "client_secret_post",
                     "grant_types": ["authorization_code", "refresh_token"],
                     "response_types": ["code", "token", "id_token"],
                     "redirect_uris": [
                       "'$NEXTCLOUD_BASE_URL'apps/user_oidc/code",
                       "'$PUBLIC_BACKEND_URL'/api/v3/sso/hydra"
                     ],
                     "client_uri": "'$NEXTCLOUD_BASE_URL'",
                     "frontchannel_logout_uri": "'$NEXTCLOUD_BASE_URL'apps/schulcloud/logout",
                     "subject_type": "pairwise"
                   }'
         echo "POSTed nextcloud to hydra."

         # Add Nextcloud' tools configuration as an external tool
         # (stored in the 'external-tools' collection) that uses OAuth.
         echo "Inserting nextcloud to external-tools..."
         mongosh $DATABASE__URL --quiet --eval 'db.getCollection("external-tools").updateOne(
             {
               "name": "'$NEXTCLOUD_SOCIALLOGIN_OIDC_INTERNAL_NAME'",
               "config_type": "oauth2"
             },
             { $setOnInsert: {
               "name": "'$NEXTCLOUD_SOCIALLOGIN_OIDC_INTERNAL_NAME'",
               "url": "'$NEXTCLOUD_BASE_URL'",
               "logoUrl": "",
               "config_type": "oauth2",
               "config_baseUrl": "'$NEXTCLOUD_BASE_URL'",
               "config_clientId": "'$NEXTCLOUD_CLIENT_ID'",
               "config_skipConsent": true,
               "parameters": [],
               "isHidden": true,
               "openNewTab": true,
               "createdAt": new Date(),
               "updatedAt": new Date(),
               "version": 1
             } },
             {
               "upsert": true
             }
         );'
         echo "Inserted nextcloud to external-tools."

         echo "Nextcloud config data init performed successfully."
    fi

    # ========== End of the Nextcloud configuration section.

    # ========== Start of the CTL seed data configuration section.
    echo "Inserting ctl seed data secrets to external-tools..."

    if [ -n "$CTL_SEED_SECRET_ONLINE_DIA_MATHE" ]; then
         # Encrypt secrets of external tools that contain an lti11 config.
         CTL_SEED_SECRET_ONLINE_DIA_MATHE=$(get_secret $CTL_SEED_SECRET_ONLINE_DIA_MATHE)
         mongosh $DATABASE__URL --quiet --eval 'db.getCollection("external-tools").updateOne(
                {
                  "name": "Product Test Onlinediagnose Grundschule - Mathematik",
                },
                { $set: {
                  "config_secret": "'$CTL_SEED_SECRET_ONLINE_DIA_MATHE'",
                } },
                {
                  "upsert": true
                }
            );'
    fi
    if [ -n "$CTL_SEED_SECRET_ONLINE_DIA_DEUTSCH" ]; then
         # Encrypt secrets of external tools that contain an lti11 config.
         CTL_SEED_SECRET_ONLINE_DIA_DEUTSCH=$(get_secret $CTL_SEED_SECRET_ONLINE_DIA_DEUTSCH)
         mongosh $DATABASE__URL --quiet --eval 'db.getCollection("external-tools").updateOne(
                {
                  "name": "Product Test Onlinediagnose Grundschule - Deutsch",
                },
                { $set: {
                  "config_secret": "'$CTL_SEED_SECRET_ONLINE_DIA_DEUTSCH'",
                } },
                {
                  "upsert": true
                }
            );'
    fi
    if [ -n "$CTL_SEED_SECRET_MERLIN" ]; then
         # Encrypt secrets of external tools that contain an lti11 config.
         CTL_SEED_SECRET_MERLIN=$(get_secret $CTL_SEED_SECRET_MERLIN)
         mongosh $DATABASE__URL --quiet --eval 'db.getCollection("external-tools").updateOne(
                {
                  "name": "Merlin Bibliothek",
                },
                { $set: {
                  "config_secret": "'$CTL_SEED_SECRET_MERLIN'",
                } },
                {
                  "upsert": true
                }
            );'
    fi
    echo "Inserted ctl seed data secrets to external-tools."

    # ========== End of the CTL seed data configuration section.

    # ========== Start of the Instance seed data configuration section.
        echo "Removing instance seed data that does not belong to '$SC_SHORTNAME'..."
        mongosh $DATABASE__URL --quiet --eval 'db.getCollection("instances").deleteMany(
                 {
                   "name": { $ne: "'$SC_SHORTNAME'" },
                 }
             );'
        echo "Removed all inapplicable instances from the seed data."

        # ========== End of the Instance seed data configuration section.

    # ========== Start of TSP system creation
    if [[ $SC_THEME == "thr" ]]; then
      echo "Adding TSP system to systems collection"

      TSP_SYSTEM_OAUTH_CLIENT_SECRET=$(get_secret $TSP_SYSTEM_OAUTH_CLIENT_SECRET)
      mongosh $DATABASE__URL --quiet --eval 'db.systems.insertOne(
          {
            "_id": ObjectId("66d707f5c5202ba10c5e6256"),
            "alias": "TSP",
            "displayName": "Thüringer Schulportal",
            "type": "oauth",
            "provisioningStrategy": "tsp",
            "oauthConfig": {
              "clientId": "'$TSP_SYSTEM_OAUTH_CLIENT_ID'",
              "clientSecret": "'$TSP_SYSTEM_OAUTH_CLIENT_SECRET'",
              "tokenEndpoint": "https://test.schulportal-thueringen.de/auth/realms/TIS/protocol/openid-connect/token",
              "grantType": "authorization_code",
              "scope": "openid",
              "responseType": "code",
              "redirectUri": "https://{{ NAMESPACE }}.thr.dbildungscloud.dev/api/v3/sso/oauth",
              "authEndpoint": "https://test.schulportal-thueringen.de/auth/realms/TIS/protocol/openid-connect/auth",
              "provider": "tsp",
              "jwksEndpoint": "https://test.schulportal-thueringen.de/auth/realms/TIS/protocol/openid-connect/certs",
              "issuer": "https://test.schulportal-thueringen.de/auth/realms/TIS"
            }
          }
      );'

      echo "Successfully added TSP system"
    fi
    # ========== End of TSP system creation
