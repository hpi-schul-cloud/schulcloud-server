import { Factory } from 'fishery';
import { ProviderOauthClient, SubjectTypeEnum, TokenAuthMethod } from '../domain';

export const providerOauthClientFactory = Factory.define<ProviderOauthClient>(({ sequence }) => {
	return {
		client_id: `client_${sequence}`,
		authorization_code_grant_id_token_lifespan: 'authorization_code_grant_id_token_lifespan',
		client_name: 'client_name',
		allowed_cors_origins: [],
		audience: [],
		authorization_code_grant_access_token_lifespan: 'authorization_code_grant_access_token_lifespan',
		authorization_code_grant_refresh_token_lifespan: 'authorization_code_grant_refresh_token_lifespan',
		client_uri: 'client_uri',
		backchannel_logout_session_required: false,
		backchannel_logout_uri: 'backchannel_logout_uri',
		client_secret: 'client_secret',
		client_credentials_grant_access_token_lifespan: 'client_credentials_grant_access_token_lifespan',
		client_secret_expires_at: 1,
		contacts: [],
		created_at: 'created_at',
		frontchannel_logout_session_required: false,
		frontchannel_logout_uri: 'frontchannel_logout_uri',
		grant_types: [],
		jwks: {},
		implicit_grant_access_token_lifespan: 'implicit_grant_access_token_lifespan',
		implicit_grant_id_token_lifespan: 'implicit_grant_id_token_lifespan',
		jwks_uri: 'jwks_uri',
		jwt_bearer_grant_access_token_lifespan: 'jwt_bearer_grant_access_token_lifespan',
		logo_uri: 'logo_uri',
		metadata: {},
		owner: 'owner',
		password_grant_access_token_lifespan: 'password_grant_access_token_lifespan',
		password_grant_refresh_token_lifespan: 'password_grant_refresh_token_lifespan',
		policy_uri: 'policy_uri',
		post_logout_redirect_uris: [],
		redirect_uris: [],
		refresh_token_grant_access_token_lifespan: 'refresh_token_grant_access_token_lifespan',
		refresh_token_grant_id_token_lifespan: 'refresh_token_grant_id_token_lifespan',
		refresh_token_grant_refresh_token_lifespan: 'refresh_token_grant_refresh_token_lifespan',
		registration_access_token: 'registration_access_token',
		registration_client_uri: 'registration_client_uri',
		request_object_signing_alg: 'request_object_signing_alg',
		request_uris: [],
		response_types: [],
		scope: 'scope',
		sector_identifier_uri: 'sector_identifier_uri',
		subject_type: SubjectTypeEnum.PAIRWISE,
		token_endpoint_auth_method: TokenAuthMethod.CLIENT_SECRET_BASIC,
		tos_uri: 'tos_uri',
		token_endpoint_auth_signing_alg: 'token_endpoint_auth_signing_alg',
		updated_at: 'updated_at',
		userinfo_signed_response_alg: 'userinfo_signed_response_alg',
	};
});
