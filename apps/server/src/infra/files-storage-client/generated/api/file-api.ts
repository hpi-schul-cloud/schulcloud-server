/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiValidationError } from '../models';
// @ts-ignore
import type { FileRecordListResponse } from '../models';
// @ts-ignore
import type { FileRecordParentType } from '../models';
// @ts-ignore
import type { FileRecordResponse } from '../models';
// @ts-ignore
import type { FileUrlParams } from '../models';
// @ts-ignore
import type { StorageLocation } from '../models';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByParent: async (storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageLocationId' is not null or undefined
            assertParamExists('deleteByParent', 'storageLocationId', storageLocationId)
            // verify required parameter 'storageLocation' is not null or undefined
            assertParamExists('deleteByParent', 'storageLocation', storageLocation)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('deleteByParent', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('deleteByParent', 'parentType', parentType)
            const localVarPath = `/file/delete/{storageLocation}/{storageLocationId}/{parentType}/{parentId}`
                .replace(`{${"storageLocationId"}}`, encodeURIComponent(String(storageLocationId)))
                .replace(`{${"storageLocation"}}`, encodeURIComponent(String(storageLocation)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileRecordId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('deleteFile', 'fileRecordId', fileRecordId)
            const localVarPath = `/file/delete/{fileRecordId}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download: async (fileRecordId: string, fileName: string, range?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileRecordId' is not null or undefined
            assertParamExists('download', 'fileRecordId', fileRecordId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('download', 'fileName', fileName)
            const localVarPath = `/file/download/{fileRecordId}/{fileName}`
                .replace(`{${"fileRecordId"}}`, encodeURIComponent(String(fileRecordId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (range != null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageLocationId' is not null or undefined
            assertParamExists('upload', 'storageLocationId', storageLocationId)
            // verify required parameter 'storageLocation' is not null or undefined
            assertParamExists('upload', 'storageLocation', storageLocation)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('upload', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('upload', 'parentType', parentType)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('upload', 'file', file)
            const localVarPath = `/file/upload/{storageLocation}/{storageLocationId}/{parentType}/{parentId}`
                .replace(`{${"storageLocationId"}}`, encodeURIComponent(String(storageLocationId)))
                .replace(`{${"storageLocation"}}`, encodeURIComponent(String(storageLocation)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl: async (storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storageLocationId' is not null or undefined
            assertParamExists('uploadFromUrl', 'storageLocationId', storageLocationId)
            // verify required parameter 'storageLocation' is not null or undefined
            assertParamExists('uploadFromUrl', 'storageLocation', storageLocation)
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('uploadFromUrl', 'parentId', parentId)
            // verify required parameter 'parentType' is not null or undefined
            assertParamExists('uploadFromUrl', 'parentType', parentType)
            // verify required parameter 'fileUrlParams' is not null or undefined
            assertParamExists('uploadFromUrl', 'fileUrlParams', fileUrlParams)
            const localVarPath = `/file/upload-from-url/{storageLocation}/{storageLocationId}/{parentType}/{parentId}`
                .replace(`{${"storageLocationId"}}`, encodeURIComponent(String(storageLocationId)))
                .replace(`{${"storageLocation"}}`, encodeURIComponent(String(storageLocation)))
                .replace(`{${"parentId"}}`, encodeURIComponent(String(parentId)))
                .replace(`{${"parentType"}}`, encodeURIComponent(String(parentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileUrlParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByParent(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByParent(storageLocationId, storageLocation, parentId, parentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.deleteByParent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(fileRecordId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileRecordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.deleteFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async download(fileRecordId: string, fileName: string, range?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.download(fileRecordId, fileName, range, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.download']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(storageLocationId, storageLocation, parentId, parentType, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.upload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFromUrl(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFromUrl(storageLocationId, storageLocation, parentId, parentType, fileUrlParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FileApi.uploadFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByParent(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, options?: any): AxiosPromise<FileRecordListResponse> {
            return localVarFp.deleteByParent(storageLocationId, storageLocation, parentId, parentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
         * @param {string} fileRecordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileRecordId: string, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.deleteFile(fileRecordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Streamable download of a binary file.
         * @param {string} fileRecordId 
         * @param {string} fileName 
         * @param {string} [range] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download(fileRecordId: string, fileName: string, range?: string, options?: any): AxiosPromise<File> {
            return localVarFp.download(fileRecordId, fileName, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Streamable upload of a binary file.
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, file: File, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.upload(storageLocationId, storageLocation, parentId, parentType, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload file from url
         * @param {string} storageLocationId 
         * @param {StorageLocation} storageLocation 
         * @param {string} parentId 
         * @param {FileRecordParentType} parentType 
         * @param {FileUrlParams} fileUrlParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: any): AxiosPromise<FileRecordResponse> {
            return localVarFp.uploadFromUrl(storageLocationId, storageLocation, parentId, parentType, fileUrlParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - interface
 * @export
 * @interface FileApi
 */
export interface FileApiInterface {
    /**
     * 
     * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    deleteByParent(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, options?: RawAxiosRequestConfig): AxiosPromise<FileRecordListResponse>;

    /**
     * 
     * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    deleteFile(fileRecordId: string, options?: RawAxiosRequestConfig): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Streamable download of a binary file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    download(fileRecordId: string, fileName: string, range?: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;

    /**
     * 
     * @summary Streamable upload of a binary file.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    upload(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, file: File, options?: RawAxiosRequestConfig): AxiosPromise<FileRecordResponse>;

    /**
     * 
     * @summary Upload file from url
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {FileUrlParams} fileUrlParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    uploadFromUrl(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: RawAxiosRequestConfig): AxiosPromise<FileRecordResponse>;

}

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI implements FileApiInterface {
    /**
     * 
     * @summary Mark all files of a parent entityId for deletion. The files are permanently deleted after a certain time.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public deleteByParent(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).deleteByParent(storageLocationId, storageLocation, parentId, parentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark a single file for deletion. The files are permanently deleted after a certain time.
     * @param {string} fileRecordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public deleteFile(fileRecordId: string, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).deleteFile(fileRecordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Streamable download of a binary file.
     * @param {string} fileRecordId 
     * @param {string} fileName 
     * @param {string} [range] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public download(fileRecordId: string, fileName: string, range?: string, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).download(fileRecordId, fileName, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Streamable upload of a binary file.
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public upload(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, file: File, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).upload(storageLocationId, storageLocation, parentId, parentType, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload file from url
     * @param {string} storageLocationId 
     * @param {StorageLocation} storageLocation 
     * @param {string} parentId 
     * @param {FileRecordParentType} parentType 
     * @param {FileUrlParams} fileUrlParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public uploadFromUrl(storageLocationId: string, storageLocation: StorageLocation, parentId: string, parentType: FileRecordParentType, fileUrlParams: FileUrlParams, options?: RawAxiosRequestConfig) {
        return FileApiFp(this.configuration).uploadFromUrl(storageLocationId, storageLocation, parentId, parentType, fileUrlParams, options).then((request) => request(this.axios, this.basePath));
    }
}

