/* tslint:disable */
/* eslint-disable */
/**
 * Vidis REST
 * Vidis REST API
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PageOfferDTO } from '../models';
/**
 * IDMBetreiberApi - axios parameter creator
 * @export
 */
export const IDMBetreiberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all offers, that has activated by the selected school.
         * @param {string} schoolName 
         * @param {string} [page] 
         * @param {string} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivatedOffersBySchool: async (schoolName: string, page?: string, pageSize?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolName' is not null or undefined
            assertParamExists('getActivatedOffersBySchool', 'schoolName', schoolName)
            const localVarPath = `/v1.0/offers/activated/by-school/{schoolName}`
                .replace(`{${"schoolName"}}`, encodeURIComponent(String(schoolName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IDMBetreiberApi - functional programming interface
 * @export
 */
export const IDMBetreiberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IDMBetreiberApiAxiosParamCreator(configuration)
    return {
        /**
         * List all offers, that has activated by the selected school.
         * @param {string} schoolName 
         * @param {string} [page] 
         * @param {string} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivatedOffersBySchool(schoolName: string, page?: string, pageSize?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfferDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivatedOffersBySchool(schoolName, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IDMBetreiberApi.getActivatedOffersBySchool']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IDMBetreiberApi - factory interface
 * @export
 */
export const IDMBetreiberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IDMBetreiberApiFp(configuration)
    return {
        /**
         * List all offers, that has activated by the selected school.
         * @param {string} schoolName 
         * @param {string} [page] 
         * @param {string} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivatedOffersBySchool(schoolName: string, page?: string, pageSize?: string, options?: any): AxiosPromise<PageOfferDTO> {
            return localVarFp.getActivatedOffersBySchool(schoolName, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IDMBetreiberApi - interface
 * @export
 * @interface IDMBetreiberApi
 */
export interface IDMBetreiberApiInterface {
    /**
     * List all offers, that has activated by the selected school.
     * @param {string} schoolName 
     * @param {string} [page] 
     * @param {string} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDMBetreiberApiInterface
     */
    getActivatedOffersBySchool(schoolName: string, page?: string, pageSize?: string, options?: RawAxiosRequestConfig): AxiosPromise<PageOfferDTO>;

}

/**
 * IDMBetreiberApi - object-oriented interface
 * @export
 * @class IDMBetreiberApi
 * @extends {BaseAPI}
 */
export class IDMBetreiberApi extends BaseAPI implements IDMBetreiberApiInterface {
    /**
     * List all offers, that has activated by the selected school.
     * @param {string} schoolName 
     * @param {string} [page] 
     * @param {string} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDMBetreiberApi
     */
    public getActivatedOffersBySchool(schoolName: string, page?: string, pageSize?: string, options?: RawAxiosRequestConfig) {
        return IDMBetreiberApiFp(this.configuration).getActivatedOffersBySchool(schoolName, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

