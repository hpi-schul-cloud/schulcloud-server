/* tslint:disable */
/* eslint-disable */
/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateGroupUsingGET200Response } from '../models';
// @ts-ignore
import type { CreateGroupUsingGET400Response } from '../models';
// @ts-ignore
import type { CreateGroupUsingGET401Response } from '../models';
// @ts-ignore
import type { CreateGroupUsingGET500Response } from '../models';
// @ts-ignore
import type { DeleteGroupUsingGET200Response } from '../models';
// @ts-ignore
import type { ListAllGroupsUsingGET200Response } from '../models';
// @ts-ignore
import type { ListPadsUsingGET200Response } from '../models';
// @ts-ignore
import type { ListSessionsOfGroupUsingGET200Response } from '../models';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupIfNotExistsForUsingGET: async (groupMapper?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroupIfNotExistsFor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupMapper !== undefined) {
                localVarQueryParameter['groupMapper'] = groupMapper;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupIfNotExistsForUsingPOST: async (groupMapper?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroupIfNotExistsFor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupMapper !== undefined) {
                localVarQueryParameter['groupMapper'] = groupMapper;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPadUsingGET: async (groupID?: string, padName?: string, text?: string, authorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroupPad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }

            if (padName !== undefined) {
                localVarQueryParameter['padName'] = padName;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPadUsingPOST: async (groupID?: string, padName?: string, text?: string, authorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroupPad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }

            if (padName !== undefined) {
                localVarQueryParameter['padName'] = padName;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupUsingGET: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupUsingPOST: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/createGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupUsingGET: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupUsingPOST: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deleteGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGroupsUsingGET: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listAllGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGroupsUsingPOST: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listAllGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsUsingGET: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listPads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsUsingPOST: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listPads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfGroupUsingGET: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSessionsOfGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfGroupUsingPOST: async (groupID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSessionsOfGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (groupID !== undefined) {
                localVarQueryParameter['groupID'] = groupID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupIfNotExistsForUsingGET(groupMapper?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupIfNotExistsForUsingGET(groupMapper, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupIfNotExistsForUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupIfNotExistsForUsingPOST(groupMapper?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupIfNotExistsForUsingPOST(groupMapper, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupIfNotExistsForUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupPadUsingGET(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupPadUsingGET(groupID, padName, text, authorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupPadUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupPadUsingPOST(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupPadUsingPOST(groupID, padName, text, authorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupPadUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupUsingGET(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupUsingGET(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroupUsingPOST(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroupUsingPOST(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.createGroupUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupUsingGET(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.deleteGroupUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupUsingPOST(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.deleteGroupUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllGroupsUsingGET(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAllGroupsUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllGroupsUsingGET(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listAllGroupsUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllGroupsUsingPOST(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAllGroupsUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllGroupsUsingPOST(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listAllGroupsUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPadsUsingGET(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPadsUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPadsUsingGET(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listPadsUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPadsUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPadsUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPadsUsingPOST(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listPadsUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessionsOfGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSessionsOfGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessionsOfGroupUsingGET(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listSessionsOfGroupUsingGET']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessionsOfGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSessionsOfGroupUsingGET200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessionsOfGroupUsingPOST(groupID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.listSessionsOfGroupUsingPOST']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupIfNotExistsForUsingGET(groupMapper?: string, options?: any): AxiosPromise<CreateGroupUsingGET200Response> {
            return localVarFp.createGroupIfNotExistsForUsingGET(groupMapper, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this functions helps you to map your application group ids to Etherpad group ids
         * @param {string} [groupMapper] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupIfNotExistsForUsingPOST(groupMapper?: string, options?: any): AxiosPromise<CreateGroupUsingGET200Response> {
            return localVarFp.createGroupIfNotExistsForUsingPOST(groupMapper, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPadUsingGET(groupID?: string, padName?: string, text?: string, authorId?: string, options?: any): AxiosPromise<DeleteGroupUsingGET200Response> {
            return localVarFp.createGroupPadUsingGET(groupID, padName, text, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new pad in this group
         * @param {string} [groupID] 
         * @param {string} [padName] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupPadUsingPOST(groupID?: string, padName?: string, text?: string, authorId?: string, options?: any): AxiosPromise<DeleteGroupUsingGET200Response> {
            return localVarFp.createGroupPadUsingPOST(groupID, padName, text, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupUsingGET(options?: any): AxiosPromise<CreateGroupUsingGET200Response> {
            return localVarFp.createGroupUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroupUsingPOST(options?: any): AxiosPromise<CreateGroupUsingGET200Response> {
            return localVarFp.createGroupUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupUsingGET(groupID?: string, options?: any): AxiosPromise<DeleteGroupUsingGET200Response> {
            return localVarFp.deleteGroupUsingGET(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletes a group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupUsingPOST(groupID?: string, options?: any): AxiosPromise<DeleteGroupUsingGET200Response> {
            return localVarFp.deleteGroupUsingPOST(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGroupsUsingGET(options?: any): AxiosPromise<ListAllGroupsUsingGET200Response> {
            return localVarFp.listAllGroupsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllGroupsUsingPOST(options?: any): AxiosPromise<ListAllGroupsUsingGET200Response> {
            return localVarFp.listAllGroupsUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsUsingGET(groupID?: string, options?: any): AxiosPromise<ListPadsUsingGET200Response> {
            return localVarFp.listPadsUsingGET(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns all pads of this group
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsUsingPOST(groupID?: string, options?: any): AxiosPromise<ListPadsUsingGET200Response> {
            return localVarFp.listPadsUsingPOST(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfGroupUsingGET(groupID?: string, options?: any): AxiosPromise<ListSessionsOfGroupUsingGET200Response> {
            return localVarFp.listSessionsOfGroupUsingGET(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} [groupID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfGroupUsingPOST(groupID?: string, options?: any): AxiosPromise<ListSessionsOfGroupUsingGET200Response> {
            return localVarFp.listSessionsOfGroupUsingPOST(groupID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - interface
 * @export
 * @interface GroupApi
 */
export interface GroupApiInterface {
    /**
     * 
     * @summary this functions helps you to map your application group ids to Etherpad group ids
     * @param {string} [groupMapper] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupIfNotExistsForUsingGET(groupMapper?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateGroupUsingGET200Response>;

    /**
     * 
     * @summary this functions helps you to map your application group ids to Etherpad group ids
     * @param {string} [groupMapper] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupIfNotExistsForUsingPOST(groupMapper?: string, options?: RawAxiosRequestConfig): AxiosPromise<CreateGroupUsingGET200Response>;

    /**
     * 
     * @summary creates a new pad in this group
     * @param {string} [groupID] 
     * @param {string} [padName] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupPadUsingGET(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteGroupUsingGET200Response>;

    /**
     * 
     * @summary creates a new pad in this group
     * @param {string} [groupID] 
     * @param {string} [padName] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupPadUsingPOST(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteGroupUsingGET200Response>;

    /**
     * 
     * @summary creates a new group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupUsingGET(options?: RawAxiosRequestConfig): AxiosPromise<CreateGroupUsingGET200Response>;

    /**
     * 
     * @summary creates a new group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    createGroupUsingPOST(options?: RawAxiosRequestConfig): AxiosPromise<CreateGroupUsingGET200Response>;

    /**
     * 
     * @summary deletes a group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    deleteGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteGroupUsingGET200Response>;

    /**
     * 
     * @summary deletes a group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    deleteGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteGroupUsingGET200Response>;

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listAllGroupsUsingGET(options?: RawAxiosRequestConfig): AxiosPromise<ListAllGroupsUsingGET200Response>;

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listAllGroupsUsingPOST(options?: RawAxiosRequestConfig): AxiosPromise<ListAllGroupsUsingGET200Response>;

    /**
     * 
     * @summary returns all pads of this group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listPadsUsingGET(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListPadsUsingGET200Response>;

    /**
     * 
     * @summary returns all pads of this group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listPadsUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListPadsUsingGET200Response>;

    /**
     * 
     * @summary 
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listSessionsOfGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListSessionsOfGroupUsingGET200Response>;

    /**
     * 
     * @summary 
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApiInterface
     */
    listSessionsOfGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListSessionsOfGroupUsingGET200Response>;

}

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI implements GroupApiInterface {
    /**
     * 
     * @summary this functions helps you to map your application group ids to Etherpad group ids
     * @param {string} [groupMapper] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupIfNotExistsForUsingGET(groupMapper?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupIfNotExistsForUsingGET(groupMapper, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this functions helps you to map your application group ids to Etherpad group ids
     * @param {string} [groupMapper] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupIfNotExistsForUsingPOST(groupMapper?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupIfNotExistsForUsingPOST(groupMapper, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new pad in this group
     * @param {string} [groupID] 
     * @param {string} [padName] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupPadUsingGET(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupPadUsingGET(groupID, padName, text, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new pad in this group
     * @param {string} [groupID] 
     * @param {string} [padName] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupPadUsingPOST(groupID?: string, padName?: string, text?: string, authorId?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupPadUsingPOST(groupID, padName, text, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupUsingGET(options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroupUsingPOST(options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).createGroupUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletes a group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public deleteGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).deleteGroupUsingGET(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletes a group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public deleteGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).deleteGroupUsingPOST(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listAllGroupsUsingGET(options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listAllGroupsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listAllGroupsUsingPOST(options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listAllGroupsUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns all pads of this group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listPadsUsingGET(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listPadsUsingGET(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns all pads of this group
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listPadsUsingPOST(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listPadsUsingPOST(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listSessionsOfGroupUsingGET(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listSessionsOfGroupUsingGET(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} [groupID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public listSessionsOfGroupUsingPOST(groupID?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).listSessionsOfGroupUsingPOST(groupID, options).then((request) => request(this.axios, this.basePath));
    }
}

