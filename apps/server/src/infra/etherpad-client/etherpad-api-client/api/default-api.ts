/* tslint:disable */
/* eslint-disable */
/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse401 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendTextUsingGET: async (padID?: string, text?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/appendText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendTextUsingPOST: async (padID?: string, text?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/appendText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadUsingGET: async (sourceID?: string, destinationID?: string, force?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/copyPad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadUsingPOST: async (sourceID?: string, destinationID?: string, force?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/copyPad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadWithoutHistoryUsingGET: async (sourceID?: string, destinationID?: string, force?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/copyPadWithoutHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadWithoutHistoryUsingPOST: async (sourceID?: string, destinationID?: string, force?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/copyPadWithoutHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributePoolUsingGET: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getAttributePool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributePoolUsingPOST: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getAttributePool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPadIDUsingGET: async (roID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getPadID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (roID !== undefined) {
                localVarQueryParameter['roID'] = roID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPadIDUsingPOST: async (roID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getPadID`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (roID !== undefined) {
                localVarQueryParameter['roID'] = roID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevisionChangesetUsingGET: async (padID?: string, rev?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getRevisionChangeset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevisionChangesetUsingPOST: async (padID?: string, rev?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getRevisionChangeset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRevisionsCountUsingGET: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getSavedRevisionsCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRevisionsCountUsingPOST: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getSavedRevisionsCount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getStats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getStats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSavedRevisionsUsingGET: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSavedRevisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSavedRevisionsUsingPOST: async (padID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSavedRevisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePadUsingGET: async (sourceID?: string, destinationID?: string, force?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/movePad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePadUsingPOST: async (sourceID?: string, destinationID?: string, force?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/movePad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (sourceID !== undefined) {
                localVarQueryParameter['sourceID'] = sourceID;
            }

            if (destinationID !== undefined) {
                localVarQueryParameter['destinationID'] = destinationID;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreRevisionUsingGET: async (padID?: string, rev?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/restoreRevision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreRevisionUsingPOST: async (padID?: string, rev?: string, authorId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/restoreRevision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['authorId'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRevisionUsingGET: async (padID?: string, rev?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/saveRevision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRevisionUsingPOST: async (padID?: string, rev?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/saveRevision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (padID !== undefined) {
                localVarQueryParameter['padID'] = padID;
            }

            if (rev !== undefined) {
                localVarQueryParameter['rev'] = rev;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appendTextUsingGET(padID?: string, text?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appendTextUsingGET(padID, text, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appendTextUsingPOST(padID?: string, text?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appendTextUsingPOST(padID, text, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyPadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyPadUsingGET(sourceID, destinationID, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyPadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyPadUsingPOST(sourceID, destinationID, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyPadWithoutHistoryUsingGET(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyPadWithoutHistoryUsingGET(sourceID, destinationID, force, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyPadWithoutHistoryUsingPOST(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.copyPadWithoutHistoryUsingPOST(sourceID, destinationID, force, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributePoolUsingGET(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributePoolUsingGET(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributePoolUsingPOST(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributePoolUsingPOST(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPadIDUsingGET(roID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPadIDUsingGET(roID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPadIDUsingPOST(roID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPadIDUsingPOST(roID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRevisionChangesetUsingGET(padID?: string, rev?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRevisionChangesetUsingGET(padID, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRevisionChangesetUsingPOST(padID?: string, rev?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRevisionChangesetUsingPOST(padID, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedRevisionsCountUsingGET(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedRevisionsCountUsingGET(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedRevisionsCountUsingPOST(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedRevisionsCountUsingPOST(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatsUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatsUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatsUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSavedRevisionsUsingGET(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSavedRevisionsUsingGET(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSavedRevisionsUsingPOST(padID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSavedRevisionsUsingPOST(padID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async movePadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.movePadUsingGET(sourceID, destinationID, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async movePadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.movePadUsingPOST(sourceID, destinationID, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreRevisionUsingGET(padID?: string, rev?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreRevisionUsingGET(padID, rev, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreRevisionUsingPOST(padID?: string, rev?: string, authorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreRevisionUsingPOST(padID, rev, authorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveRevisionUsingGET(padID?: string, rev?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveRevisionUsingGET(padID, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveRevisionUsingPOST(padID?: string, rev?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveRevisionUsingPOST(padID, rev, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendTextUsingGET(padID?: string, text?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.appendTextUsingGET(padID, text, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [text] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendTextUsingPOST(padID?: string, text?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.appendTextUsingPOST(padID, text, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.copyPadUsingGET(sourceID, destinationID, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.copyPadUsingPOST(sourceID, destinationID, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadWithoutHistoryUsingGET(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.copyPadWithoutHistoryUsingGET(sourceID, destinationID, force, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyPadWithoutHistoryUsingPOST(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.copyPadWithoutHistoryUsingPOST(sourceID, destinationID, force, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributePoolUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getAttributePoolUsingGET(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributePoolUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getAttributePoolUsingPOST(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPadIDUsingGET(roID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getPadIDUsingGET(roID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [roID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPadIDUsingPOST(roID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getPadIDUsingPOST(roID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevisionChangesetUsingGET(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getRevisionChangesetUsingGET(padID, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRevisionChangesetUsingPOST(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getRevisionChangesetUsingPOST(padID, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRevisionsCountUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getSavedRevisionsCountUsingGET(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRevisionsCountUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getSavedRevisionsCountUsingPOST(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsUsingGET(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getStatsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsUsingPOST(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getStatsUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSavedRevisionsUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.listSavedRevisionsUsingGET(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSavedRevisionsUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.listSavedRevisionsUsingPOST(padID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.movePadUsingGET(sourceID, destinationID, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sourceID] 
         * @param {string} [destinationID] 
         * @param {string} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        movePadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.movePadUsingPOST(sourceID, destinationID, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreRevisionUsingGET(padID?: string, rev?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.restoreRevisionUsingGET(padID, rev, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {string} [authorId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreRevisionUsingPOST(padID?: string, rev?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.restoreRevisionUsingPOST(padID, rev, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRevisionUsingGET(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.saveRevisionUsingGET(padID, rev, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [padID] 
         * @param {string} [rev] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRevisionUsingPOST(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.saveRevisionUsingPOST(padID, rev, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {string} [padID] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    appendTextUsingGET(padID?: string, text?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    appendTextUsingPOST(padID?: string, text?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    copyPadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    copyPadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    copyPadWithoutHistoryUsingGET(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    copyPadWithoutHistoryUsingPOST(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAttributePoolUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAttributePoolUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [roID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPadIDUsingGET(roID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [roID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPadIDUsingPOST(roID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRevisionChangesetUsingGET(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRevisionChangesetUsingPOST(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSavedRevisionsCountUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSavedRevisionsCountUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStatsUsingGET(options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStatsUsingPOST(options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listSavedRevisionsUsingGET(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listSavedRevisionsUsingPOST(padID?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    movePadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    movePadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    restoreRevisionUsingGET(padID?: string, rev?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    restoreRevisionUsingPOST(padID?: string, rev?: string, authorId?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    saveRevisionUsingGET(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    saveRevisionUsingPOST(padID?: string, rev?: string, options?: any): AxiosPromise<InlineResponse2001>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {string} [padID] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appendTextUsingGET(padID?: string, text?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).appendTextUsingGET(padID, text, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [text] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appendTextUsingPOST(padID?: string, text?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).appendTextUsingPOST(padID, text, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyPadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any) {
        return DefaultApiFp(this.configuration).copyPadUsingGET(sourceID, destinationID, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyPadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any) {
        return DefaultApiFp(this.configuration).copyPadUsingPOST(sourceID, destinationID, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyPadWithoutHistoryUsingGET(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).copyPadWithoutHistoryUsingGET(sourceID, destinationID, force, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public copyPadWithoutHistoryUsingPOST(sourceID?: string, destinationID?: string, force?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).copyPadWithoutHistoryUsingPOST(sourceID, destinationID, force, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAttributePoolUsingGET(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getAttributePoolUsingGET(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAttributePoolUsingPOST(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getAttributePoolUsingPOST(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [roID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPadIDUsingGET(roID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getPadIDUsingGET(roID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [roID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPadIDUsingPOST(roID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getPadIDUsingPOST(roID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRevisionChangesetUsingGET(padID?: string, rev?: string, options?: any) {
        return DefaultApiFp(this.configuration).getRevisionChangesetUsingGET(padID, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRevisionChangesetUsingPOST(padID?: string, rev?: string, options?: any) {
        return DefaultApiFp(this.configuration).getRevisionChangesetUsingPOST(padID, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSavedRevisionsCountUsingGET(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getSavedRevisionsCountUsingGET(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSavedRevisionsCountUsingPOST(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).getSavedRevisionsCountUsingPOST(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatsUsingGET(options?: any) {
        return DefaultApiFp(this.configuration).getStatsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatsUsingPOST(options?: any) {
        return DefaultApiFp(this.configuration).getStatsUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSavedRevisionsUsingGET(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSavedRevisionsUsingGET(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSavedRevisionsUsingPOST(padID?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSavedRevisionsUsingPOST(padID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public movePadUsingGET(sourceID?: string, destinationID?: string, force?: string, options?: any) {
        return DefaultApiFp(this.configuration).movePadUsingGET(sourceID, destinationID, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sourceID] 
     * @param {string} [destinationID] 
     * @param {string} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public movePadUsingPOST(sourceID?: string, destinationID?: string, force?: string, options?: any) {
        return DefaultApiFp(this.configuration).movePadUsingPOST(sourceID, destinationID, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public restoreRevisionUsingGET(padID?: string, rev?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).restoreRevisionUsingGET(padID, rev, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {string} [authorId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public restoreRevisionUsingPOST(padID?: string, rev?: string, authorId?: string, options?: any) {
        return DefaultApiFp(this.configuration).restoreRevisionUsingPOST(padID, rev, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveRevisionUsingGET(padID?: string, rev?: string, options?: any) {
        return DefaultApiFp(this.configuration).saveRevisionUsingGET(padID, rev, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [padID] 
     * @param {string} [rev] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveRevisionUsingPOST(padID?: string, rev?: string, options?: any) {
        return DefaultApiFp(this.configuration).saveRevisionUsingPOST(padID, rev, options).then((request) => request(this.axios, this.basePath));
    }
}
