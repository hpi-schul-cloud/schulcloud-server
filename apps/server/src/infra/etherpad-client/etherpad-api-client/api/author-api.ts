/* tslint:disable */
/* eslint-disable */
/**
 * Etherpad API
 * Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse20015 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { InlineResponse2003 } from '../models';
// @ts-ignore
import { InlineResponse2006 } from '../models';
// @ts-ignore
import { InlineResponse400 } from '../models';
// @ts-ignore
import { InlineResponse401 } from '../models';
// @ts-ignore
import { InlineResponse500 } from '../models';
/**
 * AuthorApi - axios parameter creator
 * @export
 */
export const AuthorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorIfNotExistsForUsingGET: async (authorMapper?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/createAuthorIfNotExistsFor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorMapper !== undefined) {
                localVarQueryParameter['authorMapper'] = authorMapper;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorIfNotExistsForUsingPOST: async (authorMapper?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/createAuthorIfNotExistsFor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorMapper !== undefined) {
                localVarQueryParameter['authorMapper'] = authorMapper;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorUsingGET: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/createAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorUsingPOST: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/createAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNameUsingGET: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getAuthorName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNameUsingPOST: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/getAuthorName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsOfAuthorUsingGET: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listPadsOfAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsOfAuthorUsingPOST: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listPadsOfAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfAuthorUsingGET: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSessionsOfAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfAuthorUsingPOST: async (authorID?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/listSessionsOfAuthor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (authorID !== undefined) {
                localVarQueryParameter['authorID'] = authorID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorApi - functional programming interface
 * @export
 */
export const AuthorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorIfNotExistsForUsingGET(authorMapper?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorIfNotExistsForUsingGET(authorMapper, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorIfNotExistsForUsingPOST(authorMapper?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorIfNotExistsForUsingPOST(authorMapper, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorUsingGET(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorUsingGET(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorUsingPOST(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorUsingPOST(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorNameUsingGET(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorNameUsingGET(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorNameUsingPOST(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorNameUsingPOST(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPadsOfAuthorUsingGET(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPadsOfAuthorUsingGET(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPadsOfAuthorUsingPOST(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPadsOfAuthorUsingPOST(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessionsOfAuthorUsingGET(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessionsOfAuthorUsingGET(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessionsOfAuthorUsingPOST(authorID?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessionsOfAuthorUsingPOST(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorApi - factory interface
 * @export
 */
export const AuthorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorApiFp(configuration)
    return {
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorIfNotExistsForUsingGET(authorMapper?: string, name?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.createAuthorIfNotExistsForUsingGET(authorMapper, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary this functions helps you to map your application author ids to Etherpad author ids
         * @param {string} [authorMapper] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorIfNotExistsForUsingPOST(authorMapper?: string, name?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.createAuthorIfNotExistsForUsingPOST(authorMapper, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorUsingGET(name?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.createAuthorUsingGET(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary creates a new author
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorUsingPOST(name?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.createAuthorUsingPOST(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNameUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.getAuthorNameUsingGET(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the Author Name of the author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorNameUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.getAuthorNameUsingPOST(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsOfAuthorUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listPadsOfAuthorUsingGET(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns an array of all pads this author contributed to
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPadsOfAuthorUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.listPadsOfAuthorUsingPOST(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfAuthorUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.listSessionsOfAuthorUsingGET(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary returns all sessions of an author
         * @param {string} [authorID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessionsOfAuthorUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.listSessionsOfAuthorUsingPOST(authorID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorApi - interface
 * @export
 * @interface AuthorApi
 */
export interface AuthorApiInterface {
    /**
     * 
     * @summary this functions helps you to map your application author ids to Etherpad author ids
     * @param {string} [authorMapper] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    createAuthorIfNotExistsForUsingGET(authorMapper?: string, name?: string, options?: any): AxiosPromise<InlineResponse2003>;

    /**
     * 
     * @summary this functions helps you to map your application author ids to Etherpad author ids
     * @param {string} [authorMapper] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    createAuthorIfNotExistsForUsingPOST(authorMapper?: string, name?: string, options?: any): AxiosPromise<InlineResponse2003>;

    /**
     * 
     * @summary creates a new author
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    createAuthorUsingGET(name?: string, options?: any): AxiosPromise<InlineResponse2003>;

    /**
     * 
     * @summary creates a new author
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    createAuthorUsingPOST(name?: string, options?: any): AxiosPromise<InlineResponse2003>;

    /**
     * 
     * @summary Returns the Author Name of the author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    getAuthorNameUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse20015>;

    /**
     * 
     * @summary Returns the Author Name of the author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    getAuthorNameUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse20015>;

    /**
     * 
     * @summary returns an array of all pads this author contributed to
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    listPadsOfAuthorUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse2002>;

    /**
     * 
     * @summary returns an array of all pads this author contributed to
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    listPadsOfAuthorUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse2002>;

    /**
     * 
     * @summary returns all sessions of an author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    listSessionsOfAuthorUsingGET(authorID?: string, options?: any): AxiosPromise<InlineResponse2006>;

    /**
     * 
     * @summary returns all sessions of an author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApiInterface
     */
    listSessionsOfAuthorUsingPOST(authorID?: string, options?: any): AxiosPromise<InlineResponse2006>;

}

/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
export class AuthorApi extends BaseAPI implements AuthorApiInterface {
    /**
     * 
     * @summary this functions helps you to map your application author ids to Etherpad author ids
     * @param {string} [authorMapper] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public createAuthorIfNotExistsForUsingGET(authorMapper?: string, name?: string, options?: any) {
        return AuthorApiFp(this.configuration).createAuthorIfNotExistsForUsingGET(authorMapper, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary this functions helps you to map your application author ids to Etherpad author ids
     * @param {string} [authorMapper] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public createAuthorIfNotExistsForUsingPOST(authorMapper?: string, name?: string, options?: any) {
        return AuthorApiFp(this.configuration).createAuthorIfNotExistsForUsingPOST(authorMapper, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new author
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public createAuthorUsingGET(name?: string, options?: any) {
        return AuthorApiFp(this.configuration).createAuthorUsingGET(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary creates a new author
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public createAuthorUsingPOST(name?: string, options?: any) {
        return AuthorApiFp(this.configuration).createAuthorUsingPOST(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the Author Name of the author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public getAuthorNameUsingGET(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).getAuthorNameUsingGET(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the Author Name of the author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public getAuthorNameUsingPOST(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).getAuthorNameUsingPOST(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns an array of all pads this author contributed to
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public listPadsOfAuthorUsingGET(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).listPadsOfAuthorUsingGET(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns an array of all pads this author contributed to
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public listPadsOfAuthorUsingPOST(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).listPadsOfAuthorUsingPOST(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns all sessions of an author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public listSessionsOfAuthorUsingGET(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).listSessionsOfAuthorUsingGET(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary returns all sessions of an author
     * @param {string} [authorID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public listSessionsOfAuthorUsingPOST(authorID?: string, options?: any) {
        return AuthorApiFp(this.configuration).listSessionsOfAuthorUsingPOST(authorID, options).then((request) => request(this.axios, this.basePath));
    }
}
