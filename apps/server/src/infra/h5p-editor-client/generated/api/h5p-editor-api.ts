/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, operationServerMap, type RequestArgs, RequiredError } from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import type {
	ApiValidationError,
	H5PEditorModelContentResponse,
	H5PEditorModelResponse,
	H5PSaveResponse,
	LanguageType,
	PostH5PContentCreateParams,
} from '../models';

/**
 * H5pEditorApi - axios parameter creator
 * @export
 */
export const H5pEditorApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerCreateH5pContent: async (
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'postH5PContentCreateParams' is not null or undefined
			assertParamExists(
				'h5PEditorControllerCreateH5pContent',
				'postH5PContentCreateParams',
				postH5PContentCreateParams
			);
			const localVarPath = `/h5p-editor/edit`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(
				postH5PContentCreateParams,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerDeleteH5pContent: async (
			contentId: string,
			language?: LanguageType,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'contentId' is not null or undefined
			assertParamExists('h5PEditorControllerDeleteH5pContent', 'contentId', contentId);
			const localVarPath = `/h5p-editor/delete/{contentId}`
				.replace(`{${'language'}}`, encodeURIComponent(String(language)))
				.replace(`{${'contentId'}}`, encodeURIComponent(String(contentId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetAjax: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/h5p-editor/ajax`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} filename
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetContentFile: async (
			id: string,
			filename: string,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('h5PEditorControllerGetContentFile', 'id', id);
			// verify required parameter 'filename' is not null or undefined
			assertParamExists('h5PEditorControllerGetContentFile', 'filename', filename);
			const localVarPath = `/h5p-editor/content/{id}/{filename}`
				.replace(`{${'id'}}`, encodeURIComponent(String(id)))
				.replace(`{${'filename'}}`, encodeURIComponent(String(filename)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetContentParameters: async (
			id: string,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('h5PEditorControllerGetContentParameters', 'id', id);
			const localVarPath = `/h5p-editor/params/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetH5PEditor: async (
			contentId: string,
			language: LanguageType,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'contentId' is not null or undefined
			assertParamExists('h5PEditorControllerGetH5PEditor', 'contentId', contentId);
			// verify required parameter 'language' is not null or undefined
			assertParamExists('h5PEditorControllerGetH5PEditor', 'language', language);
			const localVarPath = `/h5p-editor/edit/{contentId}/{language}`
				.replace(`{${'contentId'}}`, encodeURIComponent(String(contentId)))
				.replace(`{${'language'}}`, encodeURIComponent(String(language)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} ubername
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetLibraryFile: async (
			ubername: string,
			file: string,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'ubername' is not null or undefined
			assertParamExists('h5PEditorControllerGetLibraryFile', 'ubername', ubername);
			// verify required parameter 'file' is not null or undefined
			assertParamExists('h5PEditorControllerGetLibraryFile', 'file', file);
			const localVarPath = `/h5p-editor/libraries/{ubername}/{file}`
				.replace(`{${'ubername'}}`, encodeURIComponent(String(ubername)))
				.replace(`{${'file'}}`, encodeURIComponent(String(file)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetNewH5PEditor: async (
			language: LanguageType,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'language' is not null or undefined
			assertParamExists('h5PEditorControllerGetNewH5PEditor', 'language', language);
			const localVarPath = `/h5p-editor/edit/{language}`.replace(
				`{${'language'}}`,
				encodeURIComponent(String(language))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @summary Return dummy HTML for testing
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetPlayer: async (
			contentId: string,
			language?: LanguageType,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'contentId' is not null or undefined
			assertParamExists('h5PEditorControllerGetPlayer', 'contentId', contentId);
			const localVarPath = `/h5p-editor/play/{contentId}`
				.replace(`{${'language'}}`, encodeURIComponent(String(language)))
				.replace(`{${'contentId'}}`, encodeURIComponent(String(contentId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetTemporaryFile: async (
			file: string,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'file' is not null or undefined
			assertParamExists('h5PEditorControllerGetTemporaryFile', 'file', file);
			const localVarPath = `/h5p-editor/temp-files/{file}`.replace(`{${'file'}}`, encodeURIComponent(String(file)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerPostAjax: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/h5p-editor/ajax`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerSaveH5pContent: async (
			contentId: string,
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'contentId' is not null or undefined
			assertParamExists('h5PEditorControllerSaveH5pContent', 'contentId', contentId);
			// verify required parameter 'postH5PContentCreateParams' is not null or undefined
			assertParamExists('h5PEditorControllerSaveH5pContent', 'postH5PContentCreateParams', postH5PContentCreateParams);
			const localVarPath = `/h5p-editor/edit/{contentId}`.replace(
				`{${'contentId'}}`,
				encodeURIComponent(String(contentId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(
				postH5PContentCreateParams,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * H5pEditorApi - functional programming interface
 * @export
 */
export const H5pEditorApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = H5pEditorApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerCreateH5pContent(
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PSaveResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerCreateH5pContent(
				postH5PContentCreateParams,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerCreateH5pContent']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerDeleteH5pContent(
			contentId: string,
			language?: LanguageType,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerDeleteH5pContent(
				contentId,
				language,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerDeleteH5pContent']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetAjax(
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetAjax(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetAjax']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} filename
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetContentFile(
			id: string,
			filename: string,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetContentFile(
				id,
				filename,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetContentFile']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetContentParameters(
			id: string,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetContentParameters(id, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetContentParameters']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetH5PEditor(
			contentId: string,
			language: LanguageType,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PEditorModelContentResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetH5PEditor(
				contentId,
				language,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetH5PEditor']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} ubername
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetLibraryFile(
			ubername: string,
			file: string,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetLibraryFile(
				ubername,
				file,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetLibraryFile']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetNewH5PEditor(
			language: LanguageType,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PEditorModelResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetNewH5PEditor(language, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetNewH5PEditor']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @summary Return dummy HTML for testing
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetPlayer(
			contentId: string,
			language?: LanguageType,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetPlayer(
				contentId,
				language,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetPlayer']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerGetTemporaryFile(
			file: string,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerGetTemporaryFile(file, options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerGetTemporaryFile']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerPostAjax(
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerPostAjax(options);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerPostAjax']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async h5PEditorControllerSaveH5pContent(
			contentId: string,
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options?: RawAxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PSaveResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerSaveH5pContent(
				contentId,
				postH5PContentCreateParams,
				options
			);
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
			const localVarOperationServerBasePath =
				operationServerMap['H5pEditorApi.h5PEditorControllerSaveH5pContent']?.[localVarOperationServerIndex]?.url;
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath);
		},
	};
};

/**
 * H5pEditorApi - factory interface
 * @export
 */
export const H5pEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = H5pEditorApiFp(configuration);
	return {
		/**
		 *
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerCreateH5pContent(
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options?: any
		): AxiosPromise<H5PSaveResponse> {
			return localVarFp
				.h5PEditorControllerCreateH5pContent(postH5PContentCreateParams, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerDeleteH5pContent(
			contentId: string,
			language?: LanguageType,
			options?: any
		): AxiosPromise<boolean> {
			return localVarFp
				.h5PEditorControllerDeleteH5pContent(contentId, language, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetAjax(options?: any): AxiosPromise<object> {
			return localVarFp.h5PEditorControllerGetAjax(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} filename
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetContentFile(id: string, filename: string, options?: any): AxiosPromise<void> {
			return localVarFp
				.h5PEditorControllerGetContentFile(id, filename, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetContentParameters(id: string, options?: any): AxiosPromise<void> {
			return localVarFp
				.h5PEditorControllerGetContentParameters(id, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetH5PEditor(
			contentId: string,
			language: LanguageType,
			options?: any
		): AxiosPromise<H5PEditorModelContentResponse> {
			return localVarFp
				.h5PEditorControllerGetH5PEditor(contentId, language, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} ubername
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: any): AxiosPromise<void> {
			return localVarFp
				.h5PEditorControllerGetLibraryFile(ubername, file, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {LanguageType} language
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetNewH5PEditor(language: LanguageType, options?: any): AxiosPromise<H5PEditorModelResponse> {
			return localVarFp
				.h5PEditorControllerGetNewH5PEditor(language, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @summary Return dummy HTML for testing
		 * @param {string} contentId
		 * @param {LanguageType} [language]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetPlayer(contentId: string, language?: LanguageType, options?: any): AxiosPromise<object> {
			return localVarFp
				.h5PEditorControllerGetPlayer(contentId, language, options)
				.then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerGetTemporaryFile(file: string, options?: any): AxiosPromise<void> {
			return localVarFp.h5PEditorControllerGetTemporaryFile(file, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerPostAjax(options?: any): AxiosPromise<object> {
			return localVarFp.h5PEditorControllerPostAjax(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} contentId
		 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		h5PEditorControllerSaveH5pContent(
			contentId: string,
			postH5PContentCreateParams: PostH5PContentCreateParams,
			options?: any
		): AxiosPromise<H5PSaveResponse> {
			return localVarFp
				.h5PEditorControllerSaveH5pContent(contentId, postH5PContentCreateParams, options)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * H5pEditorApi - interface
 * @export
 * @interface H5pEditorApi
 */
export interface H5pEditorApiInterface {
	/**
	 *
	 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerCreateH5pContent(
		postH5PContentCreateParams: PostH5PContentCreateParams,
		options?: RawAxiosRequestConfig
	): AxiosPromise<H5PSaveResponse>;

	/**
	 *
	 * @param {string} contentId
	 * @param {LanguageType} [language]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerDeleteH5pContent(
		contentId: string,
		language?: LanguageType,
		options?: RawAxiosRequestConfig
	): AxiosPromise<boolean>;

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetAjax(options?: RawAxiosRequestConfig): AxiosPromise<object>;

	/**
	 *
	 * @param {string} id
	 * @param {string} filename
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetContentFile(id: string, filename: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetContentParameters(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

	/**
	 *
	 * @param {string} contentId
	 * @param {LanguageType} language
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetH5PEditor(
		contentId: string,
		language: LanguageType,
		options?: RawAxiosRequestConfig
	): AxiosPromise<H5PEditorModelContentResponse>;

	/**
	 *
	 * @param {string} ubername
	 * @param {string} file
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetLibraryFile(
		ubername: string,
		file: string,
		options?: RawAxiosRequestConfig
	): AxiosPromise<void>;

	/**
	 *
	 * @param {LanguageType} language
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetNewH5PEditor(
		language: LanguageType,
		options?: RawAxiosRequestConfig
	): AxiosPromise<H5PEditorModelResponse>;

	/**
	 *
	 * @summary Return dummy HTML for testing
	 * @param {string} contentId
	 * @param {LanguageType} [language]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetPlayer(
		contentId: string,
		language?: LanguageType,
		options?: RawAxiosRequestConfig
	): AxiosPromise<object>;

	/**
	 *
	 * @param {string} file
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerGetTemporaryFile(file: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerPostAjax(options?: RawAxiosRequestConfig): AxiosPromise<object>;

	/**
	 *
	 * @param {string} contentId
	 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApiInterface
	 */
	h5PEditorControllerSaveH5pContent(
		contentId: string,
		postH5PContentCreateParams: PostH5PContentCreateParams,
		options?: RawAxiosRequestConfig
	): AxiosPromise<H5PSaveResponse>;
}

/**
 * H5pEditorApi - object-oriented interface
 * @export
 * @class H5pEditorApi
 * @extends {BaseAPI}
 */
export class H5pEditorApi extends BaseAPI implements H5pEditorApiInterface {
	/**
	 *
	 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerCreateH5pContent(
		postH5PContentCreateParams: PostH5PContentCreateParams,
		options?: RawAxiosRequestConfig
	) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerCreateH5pContent(postH5PContentCreateParams, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} contentId
	 * @param {LanguageType} [language]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerDeleteH5pContent(
		contentId: string,
		language?: LanguageType,
		options?: RawAxiosRequestConfig
	) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerDeleteH5pContent(contentId, language, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetAjax(options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetAjax(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} filename
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetContentFile(id: string, filename: string, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetContentFile(id, filename, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetContentParameters(id: string, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetContentParameters(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} contentId
	 * @param {LanguageType} language
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetH5PEditor(contentId: string, language: LanguageType, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetH5PEditor(contentId, language, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} ubername
	 * @param {string} file
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetLibraryFile(ubername: string, file: string, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetLibraryFile(ubername, file, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {LanguageType} language
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetNewH5PEditor(language: LanguageType, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetNewH5PEditor(language, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @summary Return dummy HTML for testing
	 * @param {string} contentId
	 * @param {LanguageType} [language]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetPlayer(contentId: string, language?: LanguageType, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetPlayer(contentId, language, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} file
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerGetTemporaryFile(file: string, options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerGetTemporaryFile(file, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerPostAjax(options?: RawAxiosRequestConfig) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerPostAjax(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} contentId
	 * @param {PostH5PContentCreateParams} postH5PContentCreateParams
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof H5pEditorApi
	 */
	public h5PEditorControllerSaveH5pContent(
		contentId: string,
		postH5PContentCreateParams: PostH5PContentCreateParams,
		options?: RawAxiosRequestConfig
	) {
		return H5pEditorApiFp(this.configuration)
			.h5PEditorControllerSaveH5pContent(contentId, postH5PContentCreateParams, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
