/* tslint:disable */
/* eslint-disable */
/**
 * Schulcloud-Verbund-Software Server API
 * This is v3 of Schulcloud-Verbund-Software Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { H5PCopyResponse } from '../models';
// @ts-ignore
import type { PostH5PContentCopyParams } from '../models';
/**
 * H5pEditorApi - axios parameter creator
 * @export
 */
export const H5pEditorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy the h5p content specified by the given content id. Any files used by the source content will also be copied.
         * @param {string} contentId 
         * @param {PostH5PContentCopyParams} postH5PContentCopyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerCopyH5pContent: async (contentId: string, postH5PContentCopyParams: PostH5PContentCopyParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentId' is not null or undefined
            assertParamExists('h5PEditorControllerCopyH5pContent', 'contentId', contentId)
            // verify required parameter 'postH5PContentCopyParams' is not null or undefined
            assertParamExists('h5PEditorControllerCopyH5pContent', 'postH5PContentCopyParams', postH5PContentCopyParams)
            const localVarPath = `/h5p-editor/copy/{contentId}`
                .replace(`{${"contentId"}}`, encodeURIComponent(String(contentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postH5PContentCopyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * H5pEditorApi - functional programming interface
 * @export
 */
export const H5pEditorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = H5pEditorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Copy the h5p content specified by the given content id. Any files used by the source content will also be copied.
         * @param {string} contentId 
         * @param {PostH5PContentCopyParams} postH5PContentCopyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async h5PEditorControllerCopyH5pContent(contentId: string, postH5PContentCopyParams: PostH5PContentCopyParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H5PCopyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.h5PEditorControllerCopyH5pContent(contentId, postH5PContentCopyParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['H5pEditorApi.h5PEditorControllerCopyH5pContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * H5pEditorApi - factory interface
 * @export
 */
export const H5pEditorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = H5pEditorApiFp(configuration)
    return {
        /**
         * 
         * @summary Copy the h5p content specified by the given content id. Any files used by the source content will also be copied.
         * @param {string} contentId 
         * @param {PostH5PContentCopyParams} postH5PContentCopyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        h5PEditorControllerCopyH5pContent(contentId: string, postH5PContentCopyParams: PostH5PContentCopyParams, options?: any): AxiosPromise<H5PCopyResponse> {
            return localVarFp.h5PEditorControllerCopyH5pContent(contentId, postH5PContentCopyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * H5pEditorApi - interface
 * @export
 * @interface H5pEditorApi
 */
export interface H5pEditorApiInterface {
    /**
     * 
     * @summary Copy the h5p content specified by the given content id. Any files used by the source content will also be copied.
     * @param {string} contentId 
     * @param {PostH5PContentCopyParams} postH5PContentCopyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApiInterface
     */
    h5PEditorControllerCopyH5pContent(contentId: string, postH5PContentCopyParams: PostH5PContentCopyParams, options?: RawAxiosRequestConfig): AxiosPromise<H5PCopyResponse>;

}

/**
 * H5pEditorApi - object-oriented interface
 * @export
 * @class H5pEditorApi
 * @extends {BaseAPI}
 */
export class H5pEditorApi extends BaseAPI implements H5pEditorApiInterface {
    /**
     * 
     * @summary Copy the h5p content specified by the given content id. Any files used by the source content will also be copied.
     * @param {string} contentId 
     * @param {PostH5PContentCopyParams} postH5PContentCopyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H5pEditorApi
     */
    public h5PEditorControllerCopyH5pContent(contentId: string, postH5PContentCopyParams: PostH5PContentCopyParams, options?: RawAxiosRequestConfig) {
        return H5pEditorApiFp(this.configuration).h5PEditorControllerCopyH5pContent(contentId, postH5PContentCopyParams, options).then((request) => request(this.axios, this.basePath));
    }
}

