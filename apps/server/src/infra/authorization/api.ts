/* tslint:disable */
/* eslint-disable */
/**
 * HPI Schul-Cloud Server API
 * This is v3 of HPI Schul-Cloud Server. Checkout /docs for v1.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountByIdBodyParams
 */
export interface AccountByIdBodyParams {
    /**
     * The new user name for the user.
     * @type {string}
     * @memberof AccountByIdBodyParams
     */
    'username'?: string | null;
    /**
     * The new password for the user.
     * @type {string}
     * @memberof AccountByIdBodyParams
     */
    'password'?: string | null;
    /**
     * The new activation state of the user.
     * @type {boolean}
     * @memberof AccountByIdBodyParams
     */
    'activated'?: boolean | null;
}
/**
 * 
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'userId': string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountResponse
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface AccountSearchListResponse
 */
export interface AccountSearchListResponse {
    /**
     * The items for the current page.
     * @type {Array<AccountResponse>}
     * @memberof AccountSearchListResponse
     */
    'data': Array<AccountResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof AccountSearchListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof AccountSearchListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof AccountSearchListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Action = {
    Read: 'read',
    Write: 'write'
} as const;

export type Action = typeof Action[keyof typeof Action];


/**
 * 
 * @export
 * @interface AlertResponse
 */
export interface AlertResponse {
    /**
     * 
     * @type {Array<Message>}
     * @memberof AlertResponse
     */
    'data': Array<Message>;
}
/**
 * 
 * @export
 * @interface ApiValidationError
 */
export interface ApiValidationError {
    /**
     * The response status code.
     * @type {number}
     * @memberof ApiValidationError
     */
    'code': number;
    /**
     * The error type.
     * @type {string}
     * @memberof ApiValidationError
     */
    'type': string;
    /**
     * The error title.
     * @type {string}
     * @memberof ApiValidationError
     */
    'title': string;
    /**
     * The error message.
     * @type {string}
     * @memberof ApiValidationError
     */
    'message': string;
    /**
     * The error details.
     * @type {object}
     * @memberof ApiValidationError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface AuthorizationBodyParams
 */
export interface AuthorizationBodyParams {
    /**
     * 
     * @type {AuthorizationContextParams}
     * @memberof AuthorizationBodyParams
     */
    'context': AuthorizationContextParams;
    /**
     * The entity or domain object the operation should be performed on.
     * @type {string}
     * @memberof AuthorizationBodyParams
     */
    'referenceType': AuthorizationBodyParamsReferenceTypeEnum;
    /**
     * The id of the entity/domain object of the defined referenceType.
     * @type {string}
     * @memberof AuthorizationBodyParams
     */
    'referenceId': string;
}

export const AuthorizationBodyParamsReferenceTypeEnum = {
    Users: 'users',
    Schools: 'schools',
    Courses: 'courses',
    Coursegroups: 'coursegroups',
    Tasks: 'tasks',
    Lessons: 'lessons',
    Teams: 'teams',
    Submissions: 'submissions',
    SchoolExternalTools: 'school-external-tools',
    Boardnodes: 'boardnodes',
    ContextExternalTools: 'context-external-tools'
} as const;

export type AuthorizationBodyParamsReferenceTypeEnum = typeof AuthorizationBodyParamsReferenceTypeEnum[keyof typeof AuthorizationBodyParamsReferenceTypeEnum];

/**
 * 
 * @export
 * @interface AuthorizationContextParams
 */
export interface AuthorizationContextParams {
    /**
     * 
     * @type {Action}
     * @memberof AuthorizationContextParams
     */
    'action': Action;
    /**
     * User permissions that are needed to execute the operation.
     * @type {Array<Permission>}
     * @memberof AuthorizationContextParams
     */
    'requiredPermissions': Array<Permission>;
}


/**
 * 
 * @export
 * @interface AuthorizedReponse
 */
export interface AuthorizedReponse {
    /**
     * 
     * @type {string}
     * @memberof AuthorizedReponse
     */
    'userId': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthorizedReponse
     */
    'isAuthorized': boolean;
}
/**
 * 
 * @export
 * @interface BasicToolConfigParams
 */
export interface BasicToolConfigParams {
    /**
     * 
     * @type {string}
     * @memberof BasicToolConfigParams
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof BasicToolConfigParams
     */
    'baseUrl': string;
}
/**
 * 
 * @export
 * @interface BoardContextResponse
 */
export interface BoardContextResponse {
    /**
     * 
     * @type {string}
     * @memberof BoardContextResponse
     */
    'id': string;
    /**
     * 
     * @type {BoardExternalReferenceType}
     * @memberof BoardContextResponse
     */
    'type': BoardExternalReferenceType;
}


/**
 * 
 * @export
 * @interface BoardElementResponse
 */
export interface BoardElementResponse {
    /**
     * the type of the element in the content. For possible types, please refer to the enum
     * @type {string}
     * @memberof BoardElementResponse
     */
    'type': BoardElementResponseTypeEnum;
    /**
     * Content of the Board, either: a task or a lesson specific for the board
     * @type {object}
     * @memberof BoardElementResponse
     */
    'content': object;
}

export const BoardElementResponseTypeEnum = {
    Task: 'task',
    Lesson: 'lesson',
    ColumnBoard: 'column-board'
} as const;

export type BoardElementResponseTypeEnum = typeof BoardElementResponseTypeEnum[keyof typeof BoardElementResponseTypeEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const BoardExternalReferenceType = {
    Course: 'course',
    User: 'user'
} as const;

export type BoardExternalReferenceType = typeof BoardExternalReferenceType[keyof typeof BoardExternalReferenceType];


/**
 * 
 * @export
 * @enum {string}
 */

export const BoardLayout = {
    Columns: 'columns',
    List: 'list'
} as const;

export type BoardLayout = typeof BoardLayout[keyof typeof BoardLayout];


/**
 * 
 * @export
 * @enum {string}
 */

export const BoardParentType = {
    Course: 'course',
    User: 'user'
} as const;

export type BoardParentType = typeof BoardParentType[keyof typeof BoardParentType];


/**
 * 
 * @export
 * @interface BoardResponse
 */
export interface BoardResponse {
    /**
     * 
     * @type {string}
     * @memberof BoardResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BoardResponse
     */
    'title': string;
    /**
     * 
     * @type {Array<ColumnResponse>}
     * @memberof BoardResponse
     */
    'columns': Array<ColumnResponse>;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof BoardResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {boolean}
     * @memberof BoardResponse
     */
    'isVisible': boolean;
    /**
     * 
     * @type {string}
     * @memberof BoardResponse
     */
    'layout': string;
}
/**
 * @type BoardSubmissionControllerCreateElement201Response
 * @export
 */
export type BoardSubmissionControllerCreateElement201Response = FileElementResponse | RichTextElementResponse;

/**
 * @type CardControllerCreateElement201Response
 * @export
 */
export type CardControllerCreateElement201Response = DrawingElementResponse | ExternalToolElementResponse | FileElementResponse | LinkElementResponse | RichTextElementResponse | SubmissionContainerElementResponse;

/**
 * 
 * @export
 * @interface CardListResponse
 */
export interface CardListResponse {
    /**
     * 
     * @type {Array<CardResponse>}
     * @memberof CardListResponse
     */
    'data': Array<CardResponse>;
}
/**
 * 
 * @export
 * @interface CardResponse
 */
export interface CardResponse {
    /**
     * 
     * @type {string}
     * @memberof CardResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CardResponse
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CardResponse
     */
    'height': number;
    /**
     * 
     * @type {Array<CardResponseElementsInner>}
     * @memberof CardResponse
     */
    'elements': Array<CardResponseElementsInner>;
    /**
     * 
     * @type {VisibilitySettingsResponse}
     * @memberof CardResponse
     */
    'visibilitySettings': VisibilitySettingsResponse;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof CardResponse
     */
    'timestamps': TimestampsResponse;
}
/**
 * @type CardResponseElementsInner
 * @export
 */
export type CardResponseElementsInner = CollaborativeTextEditorElementResponse | DrawingElementResponse | ExternalToolElementResponse | FileElementResponse | LinkElementResponse | RichTextElementResponse | SubmissionContainerElementResponse;

/**
 * 
 * @export
 * @interface CardSkeletonResponse
 */
export interface CardSkeletonResponse {
    /**
     * 
     * @type {string}
     * @memberof CardSkeletonResponse
     */
    'cardId': string;
    /**
     * The approximate height of the referenced card. Intended to be used for prerendering purposes. Note, that different devices can lead to this value not being precise
     * @type {number}
     * @memberof CardSkeletonResponse
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface ChangeLanguageParams
 */
export interface ChangeLanguageParams {
    /**
     * 
     * @type {LanguageType}
     * @memberof ChangeLanguageParams
     */
    'language': LanguageType;
}


/**
 * 
 * @export
 * @interface ClassInfoResponse
 */
export interface ClassInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof ClassInfoResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ClassInfoResponse
     */
    'type': ClassInfoResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ClassInfoResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ClassInfoResponse
     */
    'externalSourceName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClassInfoResponse
     */
    'teacherNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ClassInfoResponse
     */
    'schoolYear'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClassInfoResponse
     */
    'isUpgradable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ClassInfoResponse
     */
    'studentCount': number;
    /**
     * 
     * @type {Array<CourseInfoResponse>}
     * @memberof ClassInfoResponse
     */
    'synchronizedCourses'?: Array<CourseInfoResponse>;
}

export const ClassInfoResponseTypeEnum = {
    Class: 'class',
    Group: 'group'
} as const;

export type ClassInfoResponseTypeEnum = typeof ClassInfoResponseTypeEnum[keyof typeof ClassInfoResponseTypeEnum];

/**
 * 
 * @export
 * @interface ClassInfoSearchListResponse
 */
export interface ClassInfoSearchListResponse {
    /**
     * The items for the current page.
     * @type {Array<ClassInfoResponse>}
     * @memberof ClassInfoSearchListResponse
     */
    'data': Array<ClassInfoResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof ClassInfoSearchListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof ClassInfoSearchListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof ClassInfoSearchListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClassRequestContext = {
    Course: 'course',
    ClassOverview: 'class-overview'
} as const;

export type ClassRequestContext = typeof ClassRequestContext[keyof typeof ClassRequestContext];


/**
 * 
 * @export
 * @interface ClassResponse
 */
export interface ClassResponse {
    /**
     * 
     * @type {string}
     * @memberof ClassResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ClassResponse
     */
    'gradeLevel': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClassSortBy = {
    Name: 'name',
    ExternalSourceName: 'externalSourceName',
    SynchronizedCourses: 'synchronizedCourses',
    StudentCount: 'studentCount',
    TeacherNames: 'teacherNames'
} as const;

export type ClassSortBy = typeof ClassSortBy[keyof typeof ClassSortBy];


/**
 * 
 * @export
 * @interface CollaborativeTextEditorElementResponse
 */
export interface CollaborativeTextEditorElementResponse {
    /**
     * 
     * @type {string}
     * @memberof CollaborativeTextEditorElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof CollaborativeTextEditorElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof CollaborativeTextEditorElementResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {object}
     * @memberof CollaborativeTextEditorElementResponse
     */
    'content': object;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CollaborativeTextEditorParentType = {
    ContentElement: 'content-element'
} as const;

export type CollaborativeTextEditorParentType = typeof CollaborativeTextEditorParentType[keyof typeof CollaborativeTextEditorParentType];


/**
 * 
 * @export
 * @interface CollaborativeTextEditorResponse
 */
export interface CollaborativeTextEditorResponse {
    /**
     * 
     * @type {string}
     * @memberof CollaborativeTextEditorResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface CollapsableBodyParams
 */
export interface CollapsableBodyParams {
    /**
     * 
     * @type {boolean}
     * @memberof CollapsableBodyParams
     */
    'collapsed': boolean;
}
/**
 * 
 * @export
 * @interface ColorBodyParams
 */
export interface ColorBodyParams {
    /**
     * 
     * @type {MediaBoardColors}
     * @memberof ColorBodyParams
     */
    'backgroundColor': MediaBoardColors;
}


/**
 * 
 * @export
 * @interface ColumnResponse
 */
export interface ColumnResponse {
    /**
     * 
     * @type {string}
     * @memberof ColumnResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ColumnResponse
     */
    'title': string;
    /**
     * 
     * @type {Array<CardSkeletonResponse>}
     * @memberof ColumnResponse
     */
    'cards': Array<CardSkeletonResponse>;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof ColumnResponse
     */
    'timestamps': TimestampsResponse;
}
/**
 * 
 * @export
 * @interface ConfigResponse
 */
export interface ConfigResponse {
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'ACCESSIBILITY_REPORT_EMAIL': string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_NEW_SCHOOL_ADMINISTRATION_PAGE_AS_DEFAULT_ENABLED': boolean;
    /**
     * 
     * @type {number}
     * @memberof ConfigResponse
     */
    'MIGRATION_END_GRACE_PERIOD_MS': number;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_CTL_TOOLS_TAB_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_LTI_TOOLS_TAB_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SHOW_OUTDATED_USERS': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_ENABLE_LDAP_SYNC_DURING_MIGRATION': boolean;
    /**
     * 
     * @type {number}
     * @memberof ConfigResponse
     */
    'CTL_TOOLS_RELOAD_TIME_MS': number;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SHOW_NEW_CLASS_VIEW_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_CTL_TOOLS_COPY_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SHOW_MIGRATION_WIZARD': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'MIGRATION_WIZARD_DOCUMENTATION_LINK'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_TLDRAW_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'TLDRAW__ASSETS_ENABLED': boolean;
    /**
     * 
     * @type {number}
     * @memberof ConfigResponse
     */
    'TLDRAW__ASSETS_MAX_SIZE': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConfigResponse
     */
    'TLDRAW__ASSETS_ALLOWED_MIME_TYPES_LIST': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'ADMIN_TABLES_DISPLAY_CONSENT_COLUMN': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'ALERT_STATUS_URL': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_ES_COLLECTIONS_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_EXTENSIONS_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_TEAMS_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_LERNSTORE_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_ADMIN_TOGGLE_STUDENT_LERNSTORE_VIEW_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'TEACHER_STUDENT_VISIBILITY__IS_CONFIGURABLE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'TEACHER_STUDENT_VISIBILITY__IS_ENABLED_BY_DEFAULT': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'TEACHER_STUDENT_VISIBILITY__IS_VISIBLE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SCHOOL_POLICY_ENABLED_NEW': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SCHOOL_TERMS_OF_USE_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_NEXBOARD_COPY_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_VIDEOCONFERENCE_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_SUBMISSIONS_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_COLLABORATIVE_TEXT_EDITOR_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_LINK_ELEMENT_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_EXTERNAL_TOOLS_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_SHARE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COLUMN_BOARD_SOCKET_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COURSE_SHARE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_LOGIN_LINK_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_LESSON_SHARE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_TASK_SHARE': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_BOARD_LAYOUT_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_USER_MIGRATION_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COPY_SERVICE_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_CONSENT_NECESSARY': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COMMON_CARTRIDGE_COURSE_EXPORT_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_COMMON_CARTRIDGE_COURSE_IMPORT_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SCHOOL_SANIS_USER_MIGRATION_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SCHULCONNEX_COURSE_SYNC_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_ALLOW_INSECURE_LDAP_URL_ENABLED': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'GHOST_BASE_URL': string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'ROCKETCHAT_SERVICE_ENABLED': boolean;
    /**
     * 
     * @type {Array<LanguageType>}
     * @memberof ConfigResponse
     */
    'I18N__AVAILABLE_LANGUAGES': Array<LanguageType>;
    /**
     * 
     * @type {LanguageType}
     * @memberof ConfigResponse
     */
    'I18N__DEFAULT_LANGUAGE': LanguageType;
    /**
     * 
     * @type {LanguageType}
     * @memberof ConfigResponse
     */
    'I18N__FALLBACK_LANGUAGE': LanguageType;
    /**
     * 
     * @type {Timezone}
     * @memberof ConfigResponse
     */
    'I18N__DEFAULT_TIMEZONE': Timezone;
    /**
     * 
     * @type {number}
     * @memberof ConfigResponse
     */
    'JWT_SHOW_TIMEOUT_WARNING_SECONDS': number;
    /**
     * 
     * @type {number}
     * @memberof ConfigResponse
     */
    'JWT_TIMEOUT_SECONDS': number;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'NOT_AUTHENTICATED_REDIRECT_URL': string;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'DOCUMENT_BASE_DIR': string;
    /**
     * 
     * @type {SchulcloudTheme}
     * @memberof ConfigResponse
     */
    'SC_THEME': SchulcloudTheme;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'SC_TITLE': string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_MEDIA_SHELF_ENABLED': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConfigResponse
     */
    'BOARD_COLLABORATION_URI': string;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_NEW_LAYOUT_ENABLED': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConfigResponse
     */
    'FEATURE_SCHULCONNEX_MEDIA_LICENSE_ENABLED': boolean;
}


/**
 * 
 * @export
 * @interface ConsentRequestBody
 */
export interface ConsentRequestBody {
    /**
     * The error should follow the OAuth2 error format (e.g. invalid_request, login_required). Defaults to request_denied.
     * @type {string}
     * @memberof ConsentRequestBody
     */
    'error'?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
     * @type {string}
     * @memberof ConsentRequestBody
     */
    'error_debug'?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof ConsentRequestBody
     */
    'error_description'?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof ConsentRequestBody
     */
    'error_hint'?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403). Defaults to 400.
     * @type {number}
     * @memberof ConsentRequestBody
     */
    'status_code'?: number;
    /**
     * The Oauth2 client id.
     * @type {Array<string>}
     * @memberof ConsentRequestBody
     */
    'grant_scope'?: Array<string>;
    /**
     * Remember, if set to true, tells the oauth provider to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof ConsentRequestBody
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to 0, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof ConsentRequestBody
     */
    'remember_for'?: number;
}
/**
 * 
 * @export
 * @interface ConsentResponse
 */
export interface ConsentResponse {
    /**
     * ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session
     * @type {string}
     * @memberof ConsentResponse
     */
    'acr': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsentResponse
     */
    'amr'?: Array<string>;
    /**
     * Is the id/authorization challenge of the consent authorization request. It is used to identify the session.
     * @type {object}
     * @memberof ConsentResponse
     */
    'challenge': object;
    /**
     * 
     * @type {OauthClientResponse}
     * @memberof ConsentResponse
     */
    'client': OauthClientResponse;
    /**
     * 
     * @type {object}
     * @memberof ConsentResponse
     */
    'context': object;
    /**
     * LoginChallenge is the login challenge this consent challenge belongs to.
     * @type {string}
     * @memberof ConsentResponse
     */
    'login_challenge': string;
    /**
     * LoginSessionID is the login session ID.
     * @type {string}
     * @memberof ConsentResponse
     */
    'login_session_id': string;
    /**
     * 
     * @type {OidcContextResponse}
     * @memberof ConsentResponse
     */
    'oidc_context': OidcContextResponse;
    /**
     * RequestUrl is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client.
     * @type {string}
     * @memberof ConsentResponse
     */
    'request_url': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConsentResponse
     */
    'requested_access_token_audience'?: Array<string>;
    /**
     * The request scopes of the login request.
     * @type {Array<string>}
     * @memberof ConsentResponse
     */
    'requested_scope'?: Array<string>;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously.
     * @type {boolean}
     * @memberof ConsentResponse
     */
    'skip': boolean;
    /**
     * Subject is the user id of the end-user that is authenticated.
     * @type {string}
     * @memberof ConsentResponse
     */
    'subject': string;
}
/**
 * 
 * @export
 * @interface ConsentSessionResponse
 */
export interface ConsentSessionResponse {
    /**
     * The id of the client.
     * @type {string}
     * @memberof ConsentSessionResponse
     */
    'client_id': string;
    /**
     * The name of the client.
     * @type {string}
     * @memberof ConsentSessionResponse
     */
    'client_name': string;
    /**
     * The id/challenge of the consent authorization request.
     * @type {string}
     * @memberof ConsentSessionResponse
     */
    'challenge': string;
}
/**
 * 
 * @export
 * @interface ConsentsResponse
 */
export interface ConsentsResponse {
    /**
     * 
     * @type {UserConsentResponse}
     * @memberof ConsentsResponse
     */
    'userConsent': UserConsentResponse;
    /**
     * 
     * @type {Array<ParentConsentResponse>}
     * @memberof ConsentsResponse
     */
    'parentConsents': Array<ParentConsentResponse>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ContentElementType = {
    File: 'file',
    Drawing: 'drawing',
    Link: 'link',
    RichText: 'richText',
    SubmissionContainer: 'submissionContainer',
    ExternalTool: 'externalTool',
    CollaborativeTextEditor: 'collaborativeTextEditor'
} as const;

export type ContentElementType = typeof ContentElementType[keyof typeof ContentElementType];


/**
 * 
 * @export
 * @interface ContextExternalToolBodyParams
 */
export interface ContextExternalToolBodyParams {
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolBodyParams
     */
    'contextId': string;
    /**
     * 
     * @type {ToolContextType}
     * @memberof ContextExternalToolBodyParams
     */
    'contextType': ToolContextType;
}


/**
 * 
 * @export
 * @interface ContextExternalToolConfigurationStatusResponse
 */
export interface ContextExternalToolConfigurationStatusResponse {
    /**
     * Is the tool outdated on school scope, because of non matching versions or required parameter changes on ExternalTool?
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isOutdatedOnScopeSchool': boolean;
    /**
     * Is the tool outdated on context scope, because of non matching versions or required parameter changes on SchoolExternalTool?
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isOutdatedOnScopeContext': boolean;
    /**
     * True, if a mandatory parameter on the context external tool is missing a value
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isIncompleteOnScopeContext': boolean;
    /**
     * True, if a optional parameter on the context external tool is missing a value. This is happening, when course is copied.
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isIncompleteOperationalOnScopeContext': boolean;
    /**
     * Is the tool deactivated, because of superhero or school administrator
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isDeactivated': boolean;
    /**
     * True if the tool is not licensed for user
     * @type {boolean}
     * @memberof ContextExternalToolConfigurationStatusResponse
     */
    'isNotLicensed': boolean;
}
/**
 * 
 * @export
 * @interface ContextExternalToolConfigurationTemplateListResponse
 */
export interface ContextExternalToolConfigurationTemplateListResponse {
    /**
     * 
     * @type {Array<ContextExternalToolConfigurationTemplateResponse>}
     * @memberof ContextExternalToolConfigurationTemplateListResponse
     */
    'data': Array<ContextExternalToolConfigurationTemplateResponse>;
}
/**
 * 
 * @export
 * @interface ContextExternalToolConfigurationTemplateResponse
 */
export interface ContextExternalToolConfigurationTemplateResponse {
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolConfigurationTemplateResponse
     */
    'externalToolId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolConfigurationTemplateResponse
     */
    'schoolExternalToolId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolConfigurationTemplateResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolConfigurationTemplateResponse
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {Array<CustomParameterResponse>}
     * @memberof ContextExternalToolConfigurationTemplateResponse
     */
    'parameters': Array<CustomParameterResponse>;
}
/**
 * 
 * @export
 * @interface ContextExternalToolCountPerContextResponse
 */
export interface ContextExternalToolCountPerContextResponse {
    /**
     * 
     * @type {number}
     * @memberof ContextExternalToolCountPerContextResponse
     */
    'course': number;
    /**
     * 
     * @type {number}
     * @memberof ContextExternalToolCountPerContextResponse
     */
    'boardElement': number;
}
/**
 * 
 * @export
 * @interface ContextExternalToolPostParams
 */
export interface ContextExternalToolPostParams {
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolPostParams
     */
    'schoolToolId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolPostParams
     */
    'contextId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolPostParams
     */
    'contextType': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolPostParams
     */
    'displayName'?: string;
    /**
     * 
     * @type {Array<CustomParameterEntryParam>}
     * @memberof ContextExternalToolPostParams
     */
    'parameters'?: Array<CustomParameterEntryParam>;
}
/**
 * 
 * @export
 * @interface ContextExternalToolResponse
 */
export interface ContextExternalToolResponse {
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'schoolToolId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'contextId': string;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'contextType': ContextExternalToolResponseContextTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'displayName'?: string;
    /**
     * 
     * @type {Array<CustomParameterEntryResponse>}
     * @memberof ContextExternalToolResponse
     */
    'parameters': Array<CustomParameterEntryResponse>;
    /**
     * 
     * @type {string}
     * @memberof ContextExternalToolResponse
     */
    'logoUrl'?: string;
}

export const ContextExternalToolResponseContextTypeEnum = {
    Course: 'course',
    BoardElement: 'board-element',
    MediaBoard: 'media-board'
} as const;

export type ContextExternalToolResponseContextTypeEnum = typeof ContextExternalToolResponseContextTypeEnum[keyof typeof ContextExternalToolResponseContextTypeEnum];

/**
 * 
 * @export
 * @interface ContextExternalToolSearchListResponse
 */
export interface ContextExternalToolSearchListResponse {
    /**
     * 
     * @type {Array<ContextExternalToolResponse>}
     * @memberof ContextExternalToolSearchListResponse
     */
    'data': Array<ContextExternalToolResponse>;
}
/**
 * 
 * @export
 * @interface CopyApiResponse
 */
export interface CopyApiResponse {
    /**
     * Id of copied element
     * @type {string}
     * @memberof CopyApiResponse
     */
    'id'?: string;
    /**
     * Title of copied element
     * @type {string}
     * @memberof CopyApiResponse
     */
    'title'?: string;
    /**
     * Type of copied element
     * @type {string}
     * @memberof CopyApiResponse
     */
    'type': CopyApiResponseTypeEnum;
    /**
     * Id of destination course
     * @type {string}
     * @memberof CopyApiResponse
     */
    'destinationCourseId'?: string;
    /**
     * Copy progress status of copied element
     * @type {string}
     * @memberof CopyApiResponse
     */
    'status': CopyApiResponseStatusEnum;
    /**
     * List of included sub elements with recursive type structure
     * @type {Array<CopyApiResponse>}
     * @memberof CopyApiResponse
     */
    'elements'?: Array<CopyApiResponse>;
}

export const CopyApiResponseTypeEnum = {
    Board: 'BOARD',
    Card: 'CARD',
    CollaborativeTextEditorElement: 'COLLABORATIVE_TEXT_EDITOR_ELEMENT',
    Column: 'COLUMN',
    Columnboard: 'COLUMNBOARD',
    Content: 'CONTENT',
    Course: 'COURSE',
    CoursegroupGroup: 'COURSEGROUP_GROUP',
    ExternalTool: 'EXTERNAL_TOOL',
    ExternalToolElement: 'EXTERNAL_TOOL_ELEMENT',
    File: 'FILE',
    FileElement: 'FILE_ELEMENT',
    DrawingElement: 'DRAWING_ELEMENT',
    FileGroup: 'FILE_GROUP',
    Leaf: 'LEAF',
    Lesson: 'LESSON',
    LessonContentEtherpad: 'LESSON_CONTENT_ETHERPAD',
    LessonContentGeogebra: 'LESSON_CONTENT_GEOGEBRA',
    LessonContentGroup: 'LESSON_CONTENT_GROUP',
    LessonContentLernstore: 'LESSON_CONTENT_LERNSTORE',
    LessonContentNexboard: 'LESSON_CONTENT_NEXBOARD',
    LessonContentTask: 'LESSON_CONTENT_TASK',
    LessonContentText: 'LESSON_CONTENT_TEXT',
    LernstoreMaterial: 'LERNSTORE_MATERIAL',
    LernstoreMaterialGroup: 'LERNSTORE_MATERIAL_GROUP',
    LinkElement: 'LINK_ELEMENT',
    LtitoolGroup: 'LTITOOL_GROUP',
    MediaBoard: 'MEDIA_BOARD',
    MediaLine: 'MEDIA_LINE',
    MediaExternalToolElement: 'MEDIA_EXTERNAL_TOOL_ELEMENT',
    Metadata: 'METADATA',
    RichtextElement: 'RICHTEXT_ELEMENT',
    SubmissionContainerElement: 'SUBMISSION_CONTAINER_ELEMENT',
    SubmissionItem: 'SUBMISSION_ITEM',
    SubmissionGroup: 'SUBMISSION_GROUP',
    Task: 'TASK',
    TaskGroup: 'TASK_GROUP',
    TimeGroup: 'TIME_GROUP',
    UserGroup: 'USER_GROUP'
} as const;

export type CopyApiResponseTypeEnum = typeof CopyApiResponseTypeEnum[keyof typeof CopyApiResponseTypeEnum];
export const CopyApiResponseStatusEnum = {
    Success: 'success',
    Failure: 'failure',
    NotDoing: 'not-doing',
    NotImplemented: 'not-implemented',
    Partial: 'partial'
} as const;

export type CopyApiResponseStatusEnum = typeof CopyApiResponseStatusEnum[keyof typeof CopyApiResponseStatusEnum];

/**
 * 
 * @export
 * @interface CountyResponse
 */
export interface CountyResponse {
    /**
     * 
     * @type {string}
     * @memberof CountyResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CountyResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CountyResponse
     */
    'countyId': number;
    /**
     * 
     * @type {string}
     * @memberof CountyResponse
     */
    'antaresKey': string;
}
/**
 * 
 * @export
 * @interface CourseExportBodyParams
 */
export interface CourseExportBodyParams {
    /**
     * The list of ids of topics which should be exported. If empty no topics are exported.
     * @type {Array<string>}
     * @memberof CourseExportBodyParams
     */
    'topics': Array<string>;
    /**
     * The list of ids of tasks which should be exported. If empty no tasks are exported.
     * @type {Array<string>}
     * @memberof CourseExportBodyParams
     */
    'tasks': Array<string>;
    /**
     * The list of ids of column boards which should be exported. If empty no column boards are exported.
     * @type {Array<string>}
     * @memberof CourseExportBodyParams
     */
    'columnBoards': Array<string>;
}
/**
 * 
 * @export
 * @interface CourseInfoResponse
 */
export interface CourseInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof CourseInfoResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CourseInfoResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CourseMetadataListResponse
 */
export interface CourseMetadataListResponse {
    /**
     * The items for the current page.
     * @type {Array<CourseMetadataResponse>}
     * @memberof CourseMetadataListResponse
     */
    'data': Array<CourseMetadataResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof CourseMetadataListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof CourseMetadataListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof CourseMetadataListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface CourseMetadataResponse
 */
export interface CourseMetadataResponse {
    /**
     * The id of the Grid element
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'id': string;
    /**
     * Title of the Grid element
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'title': string;
    /**
     * Short title of the Grid element
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'shortTitle': string;
    /**
     * Color of the Grid element
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'displayColor': string;
    /**
     * Start date of the course
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'startDate'?: string;
    /**
     * End date of the course. After this the course counts as archived
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'untilDate'?: string;
    /**
     * Start of the copying process if it is still ongoing - otherwise property is not set.
     * @type {string}
     * @memberof CourseMetadataResponse
     */
    'copyingSince'?: string;
}
/**
 * 
 * @export
 * @interface CreateBoardBodyParams
 */
export interface CreateBoardBodyParams {
    /**
     * The title of the board
     * @type {string}
     * @memberof CreateBoardBodyParams
     */
    'title': string;
    /**
     * The id of the parent
     * @type {string}
     * @memberof CreateBoardBodyParams
     */
    'parentId': string;
    /**
     * 
     * @type {BoardParentType}
     * @memberof CreateBoardBodyParams
     */
    'parentType': BoardParentType;
    /**
     * 
     * @type {BoardLayout}
     * @memberof CreateBoardBodyParams
     */
    'layout': BoardLayout;
}


/**
 * 
 * @export
 * @interface CreateBoardResponse
 */
export interface CreateBoardResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateBoardResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CreateCardBodyParams
 */
export interface CreateCardBodyParams {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCardBodyParams
     */
    'requiredEmptyElements'?: Array<CreateCardBodyParamsRequiredEmptyElementsEnum>;
}

export const CreateCardBodyParamsRequiredEmptyElementsEnum = {
    File: 'file',
    Drawing: 'drawing',
    Link: 'link',
    RichText: 'richText',
    SubmissionContainer: 'submissionContainer',
    ExternalTool: 'externalTool',
    CollaborativeTextEditor: 'collaborativeTextEditor'
} as const;

export type CreateCardBodyParamsRequiredEmptyElementsEnum = typeof CreateCardBodyParamsRequiredEmptyElementsEnum[keyof typeof CreateCardBodyParamsRequiredEmptyElementsEnum];

/**
 * 
 * @export
 * @interface CreateContentElementBodyParams
 */
export interface CreateContentElementBodyParams {
    /**
     * 
     * @type {ContentElementType}
     * @memberof CreateContentElementBodyParams
     */
    'type': ContentElementType;
    /**
     * to bring element to a specific position, default is last position
     * @type {number}
     * @memberof CreateContentElementBodyParams
     */
    'toPosition'?: number;
}


/**
 * 
 * @export
 * @interface CreateMediaElementBodyParams
 */
export interface CreateMediaElementBodyParams {
    /**
     * The id of the line where the element is created
     * @type {string}
     * @memberof CreateMediaElementBodyParams
     */
    'lineId': string;
    /**
     * The position where the element is created
     * @type {number}
     * @memberof CreateMediaElementBodyParams
     */
    'position': number;
    /**
     * The id of the school external tool
     * @type {string}
     * @memberof CreateMediaElementBodyParams
     */
    'schoolExternalToolId': string;
}
/**
 * 
 * @export
 * @interface CreateNewsParams
 */
export interface CreateNewsParams {
    /**
     * Title of the News entity
     * @type {string}
     * @memberof CreateNewsParams
     */
    'title': string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof CreateNewsParams
     */
    'content': string;
    /**
     * The point in time from when the News entity schould be displayed. Defaults to now so that the news is published
     * @type {string}
     * @memberof CreateNewsParams
     */
    'displayAt'?: string;
    /**
     * Target model to which the News entity is related
     * @type {string}
     * @memberof CreateNewsParams
     */
    'targetModel': CreateNewsParamsTargetModelEnum;
    /**
     * Specific target id to which the News entity is related
     * @type {string}
     * @memberof CreateNewsParams
     */
    'targetId': string;
}

export const CreateNewsParamsTargetModelEnum = {
    Schools: 'schools',
    Courses: 'courses',
    Teams: 'teams'
} as const;

export type CreateNewsParamsTargetModelEnum = typeof CreateNewsParamsTargetModelEnum[keyof typeof CreateNewsParamsTargetModelEnum];

/**
 * 
 * @export
 * @interface CreateSubmissionItemBodyParams
 */
export interface CreateSubmissionItemBodyParams {
    /**
     * Boolean indicating whether the submission is completed.
     * @type {boolean}
     * @memberof CreateSubmissionItemBodyParams
     */
    'completed': boolean;
}
/**
 * 
 * @export
 * @interface CustomParameterEntryParam
 */
export interface CustomParameterEntryParam {
    /**
     * 
     * @type {string}
     * @memberof CustomParameterEntryParam
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterEntryParam
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CustomParameterEntryResponse
 */
export interface CustomParameterEntryResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomParameterEntryResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterEntryResponse
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CustomParameterPostParams
 */
export interface CustomParameterPostParams {
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'defaultValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'regexComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'scope': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterPostParams
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomParameterPostParams
     */
    'isOptional': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomParameterPostParams
     */
    'isProtected': boolean;
}
/**
 * 
 * @export
 * @interface CustomParameterResponse
 */
export interface CustomParameterResponse {
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'defaultValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'regexComment'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'scope': CustomParameterResponseScopeEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'location': CustomParameterResponseLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof CustomParameterResponse
     */
    'type': CustomParameterResponseTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CustomParameterResponse
     */
    'isOptional': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomParameterResponse
     */
    'isProtected': boolean;
}

export const CustomParameterResponseScopeEnum = {
    Global: 'global',
    School: 'school',
    Context: 'context'
} as const;

export type CustomParameterResponseScopeEnum = typeof CustomParameterResponseScopeEnum[keyof typeof CustomParameterResponseScopeEnum];
export const CustomParameterResponseLocationEnum = {
    Path: 'path',
    Body: 'body',
    Query: 'query'
} as const;

export type CustomParameterResponseLocationEnum = typeof CustomParameterResponseLocationEnum[keyof typeof CustomParameterResponseLocationEnum];
export const CustomParameterResponseTypeEnum = {
    String: 'string',
    Number: 'number',
    Boolean: 'boolean',
    AutoContextid: 'auto_contextid',
    AutoContextname: 'auto_contextname',
    AutoSchoolid: 'auto_schoolid',
    AutoSchoolnumber: 'auto_schoolnumber',
    AutoMediumid: 'auto_mediumid'
} as const;

export type CustomParameterResponseTypeEnum = typeof CustomParameterResponseTypeEnum[keyof typeof CustomParameterResponseTypeEnum];

/**
 * 
 * @export
 * @interface DashboardGridElementResponse
 */
export interface DashboardGridElementResponse {
    /**
     * The id of the Grid element
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'id': string;
    /**
     * Title of the Grid element
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'title': string;
    /**
     * Short title of the Grid element
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'shortTitle': string;
    /**
     * Color of the Grid element
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'displayColor': string;
    /**
     * X position of the Grid element
     * @type {number}
     * @memberof DashboardGridElementResponse
     */
    'xPosition': number;
    /**
     * Y position of the Grid element
     * @type {number}
     * @memberof DashboardGridElementResponse
     */
    'yPosition': number;
    /**
     * The id of the group element
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'groupId': string;
    /**
     * List of all subelements in the group
     * @type {Array<DashboardGridSubElementResponse>}
     * @memberof DashboardGridElementResponse
     */
    'groupElements': Array<DashboardGridSubElementResponse>;
    /**
     * Start of the copying process if it is still ongoing - otherwise property is not set.
     * @type {string}
     * @memberof DashboardGridElementResponse
     */
    'copyingSince': string;
    /**
     * Is the course synchronized with a group?
     * @type {boolean}
     * @memberof DashboardGridElementResponse
     */
    'isSynchronized': boolean;
}
/**
 * 
 * @export
 * @interface DashboardGridSubElementResponse
 */
export interface DashboardGridSubElementResponse {
    /**
     * The id of the Grid element
     * @type {string}
     * @memberof DashboardGridSubElementResponse
     */
    'id': string;
    /**
     * Title of the Grid element
     * @type {string}
     * @memberof DashboardGridSubElementResponse
     */
    'title': string;
    /**
     * Short title of the Grid element
     * @type {string}
     * @memberof DashboardGridSubElementResponse
     */
    'shortTitle': string;
    /**
     * Color of the Grid element
     * @type {string}
     * @memberof DashboardGridSubElementResponse
     */
    'displayColor': string;
}
/**
 * 
 * @export
 * @interface DashboardResponse
 */
export interface DashboardResponse {
    /**
     * The id of the Dashboard entity
     * @type {string}
     * @memberof DashboardResponse
     */
    'id': string;
    /**
     * List of all elements visible on the dashboard
     * @type {Array<DashboardGridElementResponse>}
     * @memberof DashboardResponse
     */
    'gridElements': Array<DashboardGridElementResponse>;
}
/**
 * 
 * @export
 * @interface DrawingContentBody
 */
export interface DrawingContentBody {
    /**
     * 
     * @type {string}
     * @memberof DrawingContentBody
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface DrawingElementContent
 */
export interface DrawingElementContent {
    /**
     * 
     * @type {string}
     * @memberof DrawingElementContent
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface DrawingElementContentBody
 */
export interface DrawingElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof DrawingElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {DrawingContentBody}
     * @memberof DrawingElementContentBody
     */
    'content': DrawingContentBody;
}


/**
 * 
 * @export
 * @interface DrawingElementResponse
 */
export interface DrawingElementResponse {
    /**
     * 
     * @type {string}
     * @memberof DrawingElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof DrawingElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof DrawingElementResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {DrawingElementContent}
     * @memberof DrawingElementResponse
     */
    'content': DrawingElementContent;
}


/**
 * 
 * @export
 * @interface EntityNotFoundError
 */
export interface EntityNotFoundError {
    /**
     * The response status code.
     * @type {number}
     * @memberof EntityNotFoundError
     */
    'code': number;
    /**
     * The error type.
     * @type {string}
     * @memberof EntityNotFoundError
     */
    'type': string;
    /**
     * The error title.
     * @type {string}
     * @memberof EntityNotFoundError
     */
    'title': string;
    /**
     * The error message.
     * @type {string}
     * @memberof EntityNotFoundError
     */
    'message': string;
    /**
     * The error details.
     * @type {object}
     * @memberof EntityNotFoundError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface ExternalSourceResponse
 */
export interface ExternalSourceResponse {
    /**
     * 
     * @type {string}
     * @memberof ExternalSourceResponse
     */
    'externalId': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalSourceResponse
     */
    'systemId': string;
}
/**
 * 
 * @export
 * @interface ExternalToolBulkCreateParams
 */
export interface ExternalToolBulkCreateParams {
    /**
     * List of external tools
     * @type {Array<ExternalToolCreateParams>}
     * @memberof ExternalToolBulkCreateParams
     */
    'data': Array<ExternalToolCreateParams>;
}
/**
 * 
 * @export
 * @interface ExternalToolContentBody
 */
export interface ExternalToolContentBody {
    /**
     * 
     * @type {string}
     * @memberof ExternalToolContentBody
     */
    'contextExternalToolId'?: string;
}
/**
 * 
 * @export
 * @interface ExternalToolCreateParams
 */
export interface ExternalToolCreateParams {
    /**
     * Name of the external tool
     * @type {string}
     * @memberof ExternalToolCreateParams
     */
    'name': string;
    /**
     * Description of the external tool
     * @type {string}
     * @memberof ExternalToolCreateParams
     */
    'description'?: string;
    /**
     * URL of the external tool
     * @type {string}
     * @memberof ExternalToolCreateParams
     */
    'url'?: string;
    /**
     * URL of the logo of the external tool
     * @type {string}
     * @memberof ExternalToolCreateParams
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {ExternalToolResponseConfig}
     * @memberof ExternalToolCreateParams
     */
    'config': ExternalToolResponseConfig;
    /**
     * Custom parameters of the external tool
     * @type {Array<CustomParameterPostParams>}
     * @memberof ExternalToolCreateParams
     */
    'parameters'?: Array<CustomParameterPostParams>;
    /**
     * Tool can be hidden, those tools cant be added to e.g. school, course or board
     * @type {boolean}
     * @memberof ExternalToolCreateParams
     */
    'isHidden': boolean;
    /**
     * Tool can be deactivated, related tools can not be added to e.g. school, course or board anymore
     * @type {boolean}
     * @memberof ExternalToolCreateParams
     */
    'isDeactivated': boolean;
    /**
     * Tool should be opened in a new tab
     * @type {boolean}
     * @memberof ExternalToolCreateParams
     */
    'openNewTab': boolean;
    /**
     * Restrict tools to specific contexts
     * @type {Array<ToolContextType>}
     * @memberof ExternalToolCreateParams
     */
    'restrictToContexts'?: Array<ToolContextType>;
    /**
     * Medium of the external tool
     * @type {ExternalToolMediumParams}
     * @memberof ExternalToolCreateParams
     */
    'medium'?: ExternalToolMediumParams;
}
/**
 * 
 * @export
 * @interface ExternalToolElementContent
 */
export interface ExternalToolElementContent {
    /**
     * 
     * @type {string}
     * @memberof ExternalToolElementContent
     */
    'contextExternalToolId': string | null;
}
/**
 * 
 * @export
 * @interface ExternalToolElementContentBody
 */
export interface ExternalToolElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof ExternalToolElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {ExternalToolContentBody}
     * @memberof ExternalToolElementContentBody
     */
    'content': ExternalToolContentBody;
}


/**
 * 
 * @export
 * @interface ExternalToolElementResponse
 */
export interface ExternalToolElementResponse {
    /**
     * 
     * @type {string}
     * @memberof ExternalToolElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof ExternalToolElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {ExternalToolElementContent}
     * @memberof ExternalToolElementResponse
     */
    'content': ExternalToolElementContent;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof ExternalToolElementResponse
     */
    'timestamps': TimestampsResponse;
}


/**
 * 
 * @export
 * @interface ExternalToolMediumParams
 */
export interface ExternalToolMediumParams {
    /**
     * Id of the medium
     * @type {string}
     * @memberof ExternalToolMediumParams
     */
    'mediumId': string;
    /**
     * Publisher of the medium
     * @type {string}
     * @memberof ExternalToolMediumParams
     */
    'publisher'?: string;
    /**
     * The id of the media source
     * @type {string}
     * @memberof ExternalToolMediumParams
     */
    'mediaSourceId'?: string;
}
/**
 * 
 * @export
 * @interface ExternalToolMediumResponse
 */
export interface ExternalToolMediumResponse {
    /**
     * Id of the medium
     * @type {string}
     * @memberof ExternalToolMediumResponse
     */
    'mediumId': string;
    /**
     * Publisher of the medium
     * @type {string}
     * @memberof ExternalToolMediumResponse
     */
    'publisher'?: string;
    /**
     * The id of the media source
     * @type {string}
     * @memberof ExternalToolMediumResponse
     */
    'mediaSourceId'?: string;
}
/**
 * 
 * @export
 * @interface ExternalToolMetadataResponse
 */
export interface ExternalToolMetadataResponse {
    /**
     * 
     * @type {number}
     * @memberof ExternalToolMetadataResponse
     */
    'schoolExternalToolCount': number;
    /**
     * 
     * @type {ContextExternalToolCountPerContextResponse}
     * @memberof ExternalToolMetadataResponse
     */
    'contextExternalToolCountPerContext': ContextExternalToolCountPerContextResponse;
}
/**
 * 
 * @export
 * @interface ExternalToolResponse
 */
export interface ExternalToolResponse {
    /**
     * Id of the external tool
     * @type {string}
     * @memberof ExternalToolResponse
     */
    'id': string;
    /**
     * Name of the external tool
     * @type {string}
     * @memberof ExternalToolResponse
     */
    'name': string;
    /**
     * Description of the external tool
     * @type {string}
     * @memberof ExternalToolResponse
     */
    'description'?: string;
    /**
     * URL of the external tool
     * @type {string}
     * @memberof ExternalToolResponse
     */
    'url'?: string;
    /**
     * URL of the logo of the external tool
     * @type {string}
     * @memberof ExternalToolResponse
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {ExternalToolResponseConfig}
     * @memberof ExternalToolResponse
     */
    'config': ExternalToolResponseConfig;
    /**
     * Custom parameters of the external tool
     * @type {Array<CustomParameterResponse>}
     * @memberof ExternalToolResponse
     */
    'parameters': Array<CustomParameterResponse>;
    /**
     * Is the external tool hidden
     * @type {boolean}
     * @memberof ExternalToolResponse
     */
    'isHidden': boolean;
    /**
     * Is the external tool deactivated
     * @type {boolean}
     * @memberof ExternalToolResponse
     */
    'isDeactivated': boolean;
    /**
     * Should the external tool be opened in a new tab
     * @type {boolean}
     * @memberof ExternalToolResponse
     */
    'openNewTab': boolean;
    /**
     * Contexts in which the external tool is restricted
     * @type {Array<ToolContextType>}
     * @memberof ExternalToolResponse
     */
    'restrictToContexts'?: Array<ToolContextType>;
    /**
     * Medium of the external tool
     * @type {ExternalToolMediumResponse}
     * @memberof ExternalToolResponse
     */
    'medium'?: ExternalToolMediumResponse;
}
/**
 * @type ExternalToolResponseConfig
 * Configuration of the external tool
 * @export
 */
export type ExternalToolResponseConfig = BasicToolConfigParams | Lti11ToolConfigCreateParams | Oauth2ToolConfigCreateParams;

/**
 * 
 * @export
 * @interface ExternalToolSearchListResponse
 */
export interface ExternalToolSearchListResponse {
    /**
     * The items for the current page.
     * @type {Array<ExternalToolResponse>}
     * @memberof ExternalToolSearchListResponse
     */
    'data': Array<ExternalToolResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof ExternalToolSearchListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof ExternalToolSearchListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof ExternalToolSearchListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface ExternalToolUpdateParams
 */
export interface ExternalToolUpdateParams {
    /**
     * ID of the external tool
     * @type {string}
     * @memberof ExternalToolUpdateParams
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalToolUpdateParams
     */
    'name': string;
    /**
     * Description of the external tool
     * @type {string}
     * @memberof ExternalToolUpdateParams
     */
    'description'?: string;
    /**
     * URL of the external tool
     * @type {string}
     * @memberof ExternalToolUpdateParams
     */
    'url'?: string;
    /**
     * URL of the logo of the external tool
     * @type {string}
     * @memberof ExternalToolUpdateParams
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {ExternalToolUpdateParamsConfig}
     * @memberof ExternalToolUpdateParams
     */
    'config': ExternalToolUpdateParamsConfig;
    /**
     * Custom parameters of the external tool
     * @type {Array<CustomParameterPostParams>}
     * @memberof ExternalToolUpdateParams
     */
    'parameters'?: Array<CustomParameterPostParams>;
    /**
     * 
     * @type {boolean}
     * @memberof ExternalToolUpdateParams
     */
    'isHidden': boolean;
    /**
     * Tool can be deactivated, related tools can not be added to e.g. school, course or board anymore
     * @type {boolean}
     * @memberof ExternalToolUpdateParams
     */
    'isDeactivated': boolean;
    /**
     * Open the tool in a new tab
     * @type {boolean}
     * @memberof ExternalToolUpdateParams
     */
    'openNewTab': boolean;
    /**
     * Restrict the tool to certain contexts
     * @type {Array<ToolContextType>}
     * @memberof ExternalToolUpdateParams
     */
    'restrictToContexts'?: Array<ToolContextType>;
    /**
     * Medium of the external tool
     * @type {ExternalToolMediumParams}
     * @memberof ExternalToolUpdateParams
     */
    'medium'?: ExternalToolMediumParams;
}
/**
 * @type ExternalToolUpdateParamsConfig
 * Configuration of the external tool
 * @export
 */
export type ExternalToolUpdateParamsConfig = BasicToolConfigParams | Lti11ToolConfigUpdateParams | Oauth2ToolConfigUpdateParams;

/**
 * 
 * @export
 * @interface FederalStateResponse
 */
export interface FederalStateResponse {
    /**
     * 
     * @type {string}
     * @memberof FederalStateResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FederalStateResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FederalStateResponse
     */
    'abbreviation': string;
    /**
     * 
     * @type {string}
     * @memberof FederalStateResponse
     */
    'logoUrl': string;
    /**
     * 
     * @type {Array<CountyResponse>}
     * @memberof FederalStateResponse
     */
    'counties': Array<CountyResponse>;
}
/**
 * 
 * @export
 * @interface FileContentBody
 */
export interface FileContentBody {
    /**
     * 
     * @type {string}
     * @memberof FileContentBody
     */
    'caption': string;
    /**
     * 
     * @type {string}
     * @memberof FileContentBody
     */
    'alternativeText': string;
}
/**
 * 
 * @export
 * @interface FileElementContent
 */
export interface FileElementContent {
    /**
     * 
     * @type {string}
     * @memberof FileElementContent
     */
    'caption': string;
    /**
     * 
     * @type {string}
     * @memberof FileElementContent
     */
    'alternativeText': string;
}
/**
 * 
 * @export
 * @interface FileElementContentBody
 */
export interface FileElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof FileElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {FileContentBody}
     * @memberof FileElementContentBody
     */
    'content': FileContentBody;
}


/**
 * 
 * @export
 * @interface FileElementResponse
 */
export interface FileElementResponse {
    /**
     * 
     * @type {string}
     * @memberof FileElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof FileElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {FileElementContent}
     * @memberof FileElementResponse
     */
    'content': FileElementContent;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof FileElementResponse
     */
    'timestamps': TimestampsResponse;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const FileStorageType = {
    AwsS3: 'awsS3'
} as const;

export type FileStorageType = typeof FileStorageType[keyof typeof FileStorageType];


/**
 * 
 * @export
 * @interface ForbiddenOperationError
 */
export interface ForbiddenOperationError {
    /**
     * The response status code.
     * @type {number}
     * @memberof ForbiddenOperationError
     */
    'code': number;
    /**
     * The error type.
     * @type {string}
     * @memberof ForbiddenOperationError
     */
    'type': string;
    /**
     * The error title.
     * @type {string}
     * @memberof ForbiddenOperationError
     */
    'title': string;
    /**
     * The error message.
     * @type {string}
     * @memberof ForbiddenOperationError
     */
    'message': string;
    /**
     * The error details.
     * @type {object}
     * @memberof ForbiddenOperationError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface GetMetaTagDataBody
 */
export interface GetMetaTagDataBody {
    /**
     * 
     * @type {string}
     * @memberof GetMetaTagDataBody
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GroupListResponse
 */
export interface GroupListResponse {
    /**
     * The items for the current page.
     * @type {Array<GroupResponse>}
     * @memberof GroupListResponse
     */
    'data': Array<GroupResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof GroupListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof GroupListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof GroupListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface GroupResponse
 */
export interface GroupResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'type': GroupResponseTypeEnum;
    /**
     * 
     * @type {Array<GroupUserResponse>}
     * @memberof GroupResponse
     */
    'users': Array<GroupUserResponse>;
    /**
     * 
     * @type {ExternalSourceResponse}
     * @memberof GroupResponse
     */
    'externalSource'?: ExternalSourceResponse;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'organizationId'?: string;
}

export const GroupResponseTypeEnum = {
    Class: 'class',
    Course: 'course',
    Other: 'other'
} as const;

export type GroupResponseTypeEnum = typeof GroupResponseTypeEnum[keyof typeof GroupResponseTypeEnum];

/**
 * 
 * @export
 * @interface GroupUserResponse
 */
export interface GroupUserResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupUserResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUserResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUserResponse
     */
    'lastName': string;
    /**
     * 
     * @type {RoleName}
     * @memberof GroupUserResponse
     */
    'role': RoleName;
}


/**
 * 
 * @export
 * @interface ImportUserListResponse
 */
export interface ImportUserListResponse {
    /**
     * The items for the current page.
     * @type {Array<ImportUserResponse>}
     * @memberof ImportUserListResponse
     */
    'data': Array<ImportUserResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof ImportUserListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof ImportUserListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof ImportUserListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface ImportUserResponse
 */
export interface ImportUserResponse {
    /**
     * id reference to a import user
     * @type {string}
     * @memberof ImportUserResponse
     */
    'importUserId': string;
    /**
     * login name from external system
     * @type {string}
     * @memberof ImportUserResponse
     */
    'loginName': string;
    /**
     * external systems user firstname
     * @type {string}
     * @memberof ImportUserResponse
     */
    'firstName': string;
    /**
     * external systems user lastname
     * @type {string}
     * @memberof ImportUserResponse
     */
    'lastName': string;
    /**
     * list of user roles from external system: student, teacher, admin
     * @type {Array<string>}
     * @memberof ImportUserResponse
     */
    'roleNames': Array<ImportUserResponseRoleNamesEnum>;
    /**
     * names of classes the user attends from external system
     * @type {Array<string>}
     * @memberof ImportUserResponse
     */
    'classNames': Array<string>;
    /**
     * assignemnt to a local user account
     * @type {UserMatchResponse}
     * @memberof ImportUserResponse
     */
    'match'?: UserMatchResponse;
    /**
     * manual flag to apply it as filter
     * @type {boolean}
     * @memberof ImportUserResponse
     */
    'flagged': boolean;
}

export const ImportUserResponseRoleNamesEnum = {
    Student: 'student',
    Teacher: 'teacher',
    Admin: 'admin'
} as const;

export type ImportUserResponseRoleNamesEnum = typeof ImportUserResponseRoleNamesEnum[keyof typeof ImportUserResponseRoleNamesEnum];

/**
 * 
 * @export
 * @interface LayoutBodyParams
 */
export interface LayoutBodyParams {
    /**
     * 
     * @type {MediaBoardLayoutType}
     * @memberof LayoutBodyParams
     */
    'layout': MediaBoardLayoutType;
}


/**
 * 
 * @export
 * @interface LdapAuthorizationBodyParams
 */
export interface LdapAuthorizationBodyParams {
    /**
     * 
     * @type {string}
     * @memberof LdapAuthorizationBodyParams
     */
    'systemId': string;
    /**
     * 
     * @type {string}
     * @memberof LdapAuthorizationBodyParams
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LdapAuthorizationBodyParams
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof LdapAuthorizationBodyParams
     */
    'schoolId': string;
}
/**
 * 
 * @export
 * @interface LessonContentResponse
 */
export interface LessonContentResponse {
    /**
     * 
     * @type {object}
     * @memberof LessonContentResponse
     */
    'content': object;
    /**
     * The id of the Material entity
     * @type {string}
     * @memberof LessonContentResponse
     * @deprecated
     */
    '_id': string;
    /**
     * The id of the Material entity
     * @type {string}
     * @memberof LessonContentResponse
     */
    'id': string;
    /**
     * Title of the Material entity
     * @type {string}
     * @memberof LessonContentResponse
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LessonContentResponse
     */
    'component': LessonContentResponseComponentEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LessonContentResponse
     */
    'hidden': boolean;
}

export const LessonContentResponseComponentEnum = {
    Etherpad: 'Etherpad',
    GeoGebra: 'geoGebra',
    Internal: 'internal',
    Resources: 'resources',
    Text: 'text',
    NeXboard: 'neXboard'
} as const;

export type LessonContentResponseComponentEnum = typeof LessonContentResponseComponentEnum[keyof typeof LessonContentResponseComponentEnum];

/**
 * 
 * @export
 * @interface LessonCopyApiParams
 */
export interface LessonCopyApiParams {
    /**
     * Destination course parent Id the lesson is copied to
     * @type {string}
     * @memberof LessonCopyApiParams
     */
    'courseId'?: string;
}
/**
 * 
 * @export
 * @interface LessonMetadataListResponse
 */
export interface LessonMetadataListResponse {
    /**
     * The items for the current page.
     * @type {Array<LessonMetadataResponse>}
     * @memberof LessonMetadataListResponse
     */
    'data': Array<LessonMetadataResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof LessonMetadataListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof LessonMetadataListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof LessonMetadataListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface LessonMetadataResponse
 */
export interface LessonMetadataResponse {
    /**
     * The id of the Lesson entity
     * @type {string}
     * @memberof LessonMetadataResponse
     */
    '_id': string;
    /**
     * Name of the Lesson entity
     * @type {string}
     * @memberof LessonMetadataResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LessonResponse
 */
export interface LessonResponse {
    /**
     * The id of the Lesson entity
     * @type {string}
     * @memberof LessonResponse
     * @deprecated
     */
    '_id': string;
    /**
     * The id of the Lesson entity
     * @type {string}
     * @memberof LessonResponse
     */
    'id': string;
    /**
     * Name of the Lesson entity
     * @type {string}
     * @memberof LessonResponse
     */
    'name': string;
    /**
     * The id of the Course entity
     * @type {string}
     * @memberof LessonResponse
     */
    'courseId'?: string;
    /**
     * The id of the Course-group entity
     * @type {string}
     * @memberof LessonResponse
     */
    'courseGroupId'?: string;
    /**
     * Hidden status of the Lesson entity
     * @type {boolean}
     * @memberof LessonResponse
     */
    'hidden': boolean;
    /**
     * Position of the Lesson entity
     * @type {number}
     * @memberof LessonResponse
     */
    'position': number;
    /**
     * Contents of the Lesson entity
     * @type {Array<LessonContentResponse>}
     * @memberof LessonResponse
     */
    'contents': Array<LessonContentResponse>;
    /**
     * Materials of the Lesson entity
     * @type {Array<MaterialResponse>}
     * @memberof LessonResponse
     */
    'materials': Array<MaterialResponse>;
}
/**
 * 
 * @export
 * @interface LinkContentBody
 */
export interface LinkContentBody {
    /**
     * 
     * @type {string}
     * @memberof LinkContentBody
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof LinkContentBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LinkContentBody
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof LinkContentBody
     */
    'imageUrl': string;
}
/**
 * 
 * @export
 * @interface LinkElementContent
 */
export interface LinkElementContent {
    /**
     * 
     * @type {string}
     * @memberof LinkElementContent
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof LinkElementContent
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof LinkElementContent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkElementContent
     */
    'imageUrl'?: string;
}
/**
 * 
 * @export
 * @interface LinkElementContentBody
 */
export interface LinkElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof LinkElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {LinkContentBody}
     * @memberof LinkElementContentBody
     */
    'content': LinkContentBody;
}


/**
 * 
 * @export
 * @interface LinkElementResponse
 */
export interface LinkElementResponse {
    /**
     * 
     * @type {string}
     * @memberof LinkElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof LinkElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {LinkElementContent}
     * @memberof LinkElementResponse
     */
    'content': LinkElementContent;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof LinkElementResponse
     */
    'timestamps': TimestampsResponse;
}


/**
 * 
 * @export
 * @interface LocalAuthorizationBodyParams
 */
export interface LocalAuthorizationBodyParams {
    /**
     * 
     * @type {string}
     * @memberof LocalAuthorizationBodyParams
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LocalAuthorizationBodyParams
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginRequestBody
 */
export interface LoginRequestBody {
    /**
     * The error should follow the OAuth2 error format (e.g. invalid_request, login_required). Defaults to request_denied.
     * @type {string}
     * @memberof LoginRequestBody
     */
    'error'?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed to the public but only in the server logs.
     * @type {string}
     * @memberof LoginRequestBody
     */
    'error_debug'?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof LoginRequestBody
     */
    'error_description'?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof LoginRequestBody
     */
    'error_hint'?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403). Defaults to 400.
     * @type {number}
     * @memberof LoginRequestBody
     */
    'status_code'?: number;
    /**
     * Remember, if set to true, tells the oauth provider to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope.
     * @type {boolean}
     * @memberof LoginRequestBody
     */
    'remember'?: boolean;
    /**
     * RememberFor sets how long the consent authorization should be remembered for in seconds. If set to 0, the authorization will be remembered indefinitely.
     * @type {number}
     * @memberof LoginRequestBody
     */
    'remember_for'?: number;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * Id of the corresponding client.
     * @type {string}
     * @memberof LoginResponse
     */
    'client_id': string;
    /**
     * The id/challenge of the consent login request.
     * @type {object}
     * @memberof LoginResponse
     */
    'challenge': object;
    /**
     * 
     * @type {object}
     * @memberof LoginResponse
     */
    'client': object;
    /**
     * 
     * @type {OidcContextResponse}
     * @memberof LoginResponse
     */
    'oidc_context': OidcContextResponse;
    /**
     * The original oauth2.0 authorization url request by the client.
     * @type {string}
     * @memberof LoginResponse
     */
    'request_url': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginResponse
     */
    'requested_access_token_audience': Array<string>;
    /**
     * The request scopes of the login request.
     * @type {Array<string>}
     * @memberof LoginResponse
     */
    'requested_scope'?: Array<string>;
    /**
     * The login session id. This parameter is used as sid for the oidc front-/backchannel logout.
     * @type {string}
     * @memberof LoginResponse
     */
    'session_id': string;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously.
     * @type {object}
     * @memberof LoginResponse
     */
    'skip': object;
    /**
     * User id of the end-user that is authenticated.
     * @type {object}
     * @memberof LoginResponse
     */
    'subject': object;
}
/**
 * 
 * @export
 * @interface Lti11ToolConfigCreateParams
 */
export interface Lti11ToolConfigCreateParams {
    /**
     * 
     * @type {ToolConfigType}
     * @memberof Lti11ToolConfigCreateParams
     */
    'type': ToolConfigType;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigCreateParams
     */
    'baseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigCreateParams
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigCreateParams
     */
    'secret': string;
    /**
     * 
     * @type {LtiMessageType}
     * @memberof Lti11ToolConfigCreateParams
     */
    'lti_message_type': LtiMessageType;
    /**
     * 
     * @type {LtiPrivacyPermission}
     * @memberof Lti11ToolConfigCreateParams
     */
    'privacy_permission': LtiPrivacyPermission;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigCreateParams
     */
    'launch_presentation_locale': string;
}


/**
 * 
 * @export
 * @interface Lti11ToolConfigUpdateParams
 */
export interface Lti11ToolConfigUpdateParams {
    /**
     * 
     * @type {ToolConfigType}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'type': ToolConfigType;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'baseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'secret'?: string;
    /**
     * 
     * @type {LtiMessageType}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'lti_message_type': LtiMessageType;
    /**
     * 
     * @type {LtiPrivacyPermission}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'privacy_permission': LtiPrivacyPermission;
    /**
     * 
     * @type {string}
     * @memberof Lti11ToolConfigUpdateParams
     */
    'launch_presentation_locale': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const LtiMessageType = {
    BasicLtiLaunchRequest: 'basic-lti-launch-request'
} as const;

export type LtiMessageType = typeof LtiMessageType[keyof typeof LtiMessageType];


/**
 * 
 * @export
 * @enum {string}
 */

export const LtiPrivacyPermission = {
    Anonymous: 'anonymous',
    EMail: 'e-mail',
    Name: 'name',
    Public: 'public',
    Pseudonymous: 'pseudonymous'
} as const;

export type LtiPrivacyPermission = typeof LtiPrivacyPermission[keyof typeof LtiPrivacyPermission];


/**
 * 
 * @export
 * @interface MaterialResponse
 */
export interface MaterialResponse {
    /**
     * The id of the Material entity
     * @type {string}
     * @memberof MaterialResponse
     */
    '_id': string;
    /**
     * The id of the Material entity
     * @type {string}
     * @memberof MaterialResponse
     */
    'id': string;
    /**
     * Title of the Material entity
     * @type {string}
     * @memberof MaterialResponse
     */
    'title': string;
    /**
     * ?
     * @type {Array<string>}
     * @memberof MaterialResponse
     */
    'relatedResources': Array<string>;
    /**
     * Url of the material
     * @type {string}
     * @memberof MaterialResponse
     */
    'url': string;
    /**
     * Position of the Lesson entity
     * @type {string}
     * @memberof MaterialResponse
     */
    'client': string;
    /**
     * Description of the material license
     * @type {Array<string>}
     * @memberof MaterialResponse
     */
    'license': Array<string>;
    /**
     * For material from Merlin, the Merlin reference
     * @type {string}
     * @memberof MaterialResponse
     */
    'merlinReference': string;
}
/**
 * 
 * @export
 * @interface MeAccountResponse
 */
export interface MeAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof MeAccountResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
    /**
     * 
     * @type {MeSchoolResponse}
     * @memberof MeResponse
     */
    'school': MeSchoolResponse;
    /**
     * 
     * @type {MeUserResponse}
     * @memberof MeResponse
     */
    'user': MeUserResponse;
    /**
     * 
     * @type {Array<MeRoleResponse>}
     * @memberof MeResponse
     */
    'roles': Array<MeRoleResponse>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeResponse
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {LanguageType}
     * @memberof MeResponse
     */
    'language': LanguageType;
    /**
     * 
     * @type {MeAccountResponse}
     * @memberof MeResponse
     */
    'account': MeAccountResponse;
}


/**
 * 
 * @export
 * @interface MeRoleResponse
 */
export interface MeRoleResponse {
    /**
     * 
     * @type {string}
     * @memberof MeRoleResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MeRoleResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MeSchoolLogoResponse
 */
export interface MeSchoolLogoResponse {
    /**
     * 
     * @type {string}
     * @memberof MeSchoolLogoResponse
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeSchoolLogoResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MeSchoolResponse
 */
export interface MeSchoolResponse {
    /**
     * 
     * @type {string}
     * @memberof MeSchoolResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MeSchoolResponse
     */
    'name': string;
    /**
     * 
     * @type {MeSchoolLogoResponse}
     * @memberof MeSchoolResponse
     */
    'logo': MeSchoolLogoResponse;
}
/**
 * 
 * @export
 * @interface MeUserResponse
 */
export interface MeUserResponse {
    /**
     * 
     * @type {string}
     * @memberof MeUserResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MeUserResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof MeUserResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof MeUserResponse
     */
    'customAvatarBackgroundColor'?: string;
}
/**
 * 
 * @export
 * @interface MediaAvailableLineElementResponse
 */
export interface MediaAvailableLineElementResponse {
    /**
     * School External tool id of the media available line element
     * @type {string}
     * @memberof MediaAvailableLineElementResponse
     */
    'schoolExternalToolId': string;
    /**
     * Name of the media available line element
     * @type {string}
     * @memberof MediaAvailableLineElementResponse
     */
    'name': string;
    /**
     * Description of the media available line element
     * @type {string}
     * @memberof MediaAvailableLineElementResponse
     */
    'description'?: string;
    /**
     * Logo url of the media available line element
     * @type {string}
     * @memberof MediaAvailableLineElementResponse
     */
    'logoUrl'?: string;
}
/**
 * 
 * @export
 * @interface MediaAvailableLineResponse
 */
export interface MediaAvailableLineResponse {
    /**
     * Available media elements in the line
     * @type {Array<MediaAvailableLineElementResponse>}
     * @memberof MediaAvailableLineResponse
     */
    'elements': Array<MediaAvailableLineElementResponse>;
    /**
     * 
     * @type {MediaBoardColors}
     * @memberof MediaAvailableLineResponse
     */
    'backgroundColor': MediaBoardColors;
    /**
     * Collapse available media line
     * @type {boolean}
     * @memberof MediaAvailableLineResponse
     */
    'collapsed': boolean;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const MediaBoardColors = {
    Transparent: 'transparent',
    Red: 'red',
    Pink: 'pink',
    Purple: 'purple',
    DeepPurple: 'deepPurple',
    Indigo: 'indigo',
    Blue: 'blue',
    LightBlue: 'lightBlue',
    Cyan: 'cyan',
    Teal: 'teal',
    Green: 'green',
    LightGreen: 'lightGreen',
    Lime: 'lime',
    Yellow: 'yellow',
    Amber: 'amber',
    Orange: 'orange',
    DeepOrange: 'deepOrange',
    Brown: 'brown',
    Grey: 'grey',
    BlueGrey: 'blueGrey'
} as const;

export type MediaBoardColors = typeof MediaBoardColors[keyof typeof MediaBoardColors];


/**
 * 
 * @export
 * @enum {string}
 */

export const MediaBoardLayoutType = {
    Grid: 'grid',
    List: 'list'
} as const;

export type MediaBoardLayoutType = typeof MediaBoardLayoutType[keyof typeof MediaBoardLayoutType];


/**
 * 
 * @export
 * @interface MediaBoardResponse
 */
export interface MediaBoardResponse {
    /**
     * The id of the media board
     * @type {string}
     * @memberof MediaBoardResponse
     */
    'id': string;
    /**
     * The lines of the media board
     * @type {Array<MediaLineResponse>}
     * @memberof MediaBoardResponse
     */
    'lines': Array<MediaLineResponse>;
    /**
     * The timestamps of the media board
     * @type {TimestampsResponse}
     * @memberof MediaBoardResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {MediaBoardLayoutType}
     * @memberof MediaBoardResponse
     */
    'layout': MediaBoardLayoutType;
}


/**
 * 
 * @export
 * @interface MediaExternalToolElementContent
 */
export interface MediaExternalToolElementContent {
    /**
     * The id of the context external tool
     * @type {string}
     * @memberof MediaExternalToolElementContent
     */
    'contextExternalToolId': string;
}
/**
 * 
 * @export
 * @interface MediaExternalToolElementResponse
 */
export interface MediaExternalToolElementResponse {
    /**
     * The id of the media external tool element
     * @type {string}
     * @memberof MediaExternalToolElementResponse
     */
    'id': string;
    /**
     * The content of the media external tool element
     * @type {MediaExternalToolElementContent}
     * @memberof MediaExternalToolElementResponse
     */
    'content': MediaExternalToolElementContent;
    /**
     * The timestamps of the media external tool element
     * @type {TimestampsResponse}
     * @memberof MediaExternalToolElementResponse
     */
    'timestamps': TimestampsResponse;
}
/**
 * 
 * @export
 * @interface MediaLineResponse
 */
export interface MediaLineResponse {
    /**
     * The id of the media line
     * @type {string}
     * @memberof MediaLineResponse
     */
    'id': string;
    /**
     * The title of the media line
     * @type {string}
     * @memberof MediaLineResponse
     */
    'title': string;
    /**
     * The elements of the media line
     * @type {Array<MediaExternalToolElementResponse>}
     * @memberof MediaLineResponse
     */
    'elements': Array<MediaExternalToolElementResponse>;
    /**
     * The timestamps of the media line
     * @type {TimestampsResponse}
     * @memberof MediaLineResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {MediaBoardColors}
     * @memberof MediaLineResponse
     */
    'backgroundColor': MediaBoardColors;
    /**
     * Collapse the media line
     * @type {boolean}
     * @memberof MediaLineResponse
     */
    'collapsed': boolean;
}


/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'timestamp': string;
    /**
     * 
     * @type {MessageOrigin}
     * @memberof Message
     */
    'origin': MessageOrigin;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface MessageOrigin
 */
export interface MessageOrigin {
    /**
     * 
     * @type {number}
     * @memberof MessageOrigin
     */
    'message_id': number;
    /**
     * 
     * @type {string}
     * @memberof MessageOrigin
     */
    'page': string;
}
/**
 * 
 * @export
 * @interface MetaTagExtractorResponse
 */
export interface MetaTagExtractorResponse {
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'parentTitle': string;
    /**
     * 
     * @type {string}
     * @memberof MetaTagExtractorResponse
     */
    'parentType': string;
}
/**
 * 
 * @export
 * @interface MoveCardBodyParams
 */
export interface MoveCardBodyParams {
    /**
     * 
     * @type {string}
     * @memberof MoveCardBodyParams
     */
    'toColumnId': string;
    /**
     * 
     * @type {number}
     * @memberof MoveCardBodyParams
     */
    'toPosition': number;
}
/**
 * 
 * @export
 * @interface MoveColumnBodyParams
 */
export interface MoveColumnBodyParams {
    /**
     * The id of the target board
     * @type {string}
     * @memberof MoveColumnBodyParams
     */
    'toBoardId': string;
    /**
     * 
     * @type {number}
     * @memberof MoveColumnBodyParams
     */
    'toPosition': number;
}
/**
 * 
 * @export
 * @interface MoveContentElementBody
 */
export interface MoveContentElementBody {
    /**
     * 
     * @type {string}
     * @memberof MoveContentElementBody
     */
    'toCardId': string;
    /**
     * 
     * @type {number}
     * @memberof MoveContentElementBody
     */
    'toPosition': number;
}
/**
 * 
 * @export
 * @interface MoveElementBodyParams
 */
export interface MoveElementBodyParams {
    /**
     * The id of the line where the element is moved to
     * @type {string}
     * @memberof MoveElementBodyParams
     */
    'toLineId': string;
    /**
     * The position where the element is moved to
     * @type {number}
     * @memberof MoveElementBodyParams
     */
    'toPosition': number;
}
/**
 * 
 * @export
 * @interface MoveElementParams
 */
export interface MoveElementParams {
    /**
     * 
     * @type {MoveElementPositionParams}
     * @memberof MoveElementParams
     */
    'from': MoveElementPositionParams;
    /**
     * 
     * @type {MoveElementPositionParams}
     * @memberof MoveElementParams
     */
    'to': MoveElementPositionParams;
}
/**
 * 
 * @export
 * @interface MoveElementPositionParams
 */
export interface MoveElementPositionParams {
    /**
     * 
     * @type {number}
     * @memberof MoveElementPositionParams
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof MoveElementPositionParams
     */
    'y': number;
    /**
     * used to identify a position within a group.
     * @type {number}
     * @memberof MoveElementPositionParams
     */
    'groupIndex'?: number;
}
/**
 * 
 * @export
 * @interface NewsListResponse
 */
export interface NewsListResponse {
    /**
     * The items for the current page.
     * @type {Array<NewsResponse>}
     * @memberof NewsListResponse
     */
    'data': Array<NewsResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof NewsListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof NewsListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof NewsListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface NewsResponse
 */
export interface NewsResponse {
    /**
     * The id of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    'id': string;
    /**
     * Title of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    'title': string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    'content': string;
    /**
     * The point in time from when the News entity schould be displayed
     * @type {string}
     * @memberof NewsResponse
     */
    'displayAt': string;
    /**
     * The type of source of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    'source'?: NewsResponseSourceEnum;
    /**
     * The source description of the News entity
     * @type {string}
     * @memberof NewsResponse
     */
    'sourceDescription'?: string;
    /**
     * 
     * @type {NewsTargetModel}
     * @memberof NewsResponse
     */
    'targetModel': NewsTargetModel;
    /**
     * Specific target id to which the News entity is related
     * @type {string}
     * @memberof NewsResponse
     */
    'targetId': string;
    /**
     * The target object with id and name, could be the school, team, or course name
     * @type {TargetInfoResponse}
     * @memberof NewsResponse
     */
    'target': TargetInfoResponse;
    /**
     * The School ownership
     * @type {SchoolInfoResponse}
     * @memberof NewsResponse
     */
    'school': SchoolInfoResponse;
    /**
     * Reference to the User that created the News entity
     * @type {UserInfoResponse}
     * @memberof NewsResponse
     */
    'creator': UserInfoResponse;
    /**
     * Reference to the User that updated the News entity
     * @type {UserInfoResponse}
     * @memberof NewsResponse
     */
    'updater'?: UserInfoResponse;
    /**
     * The creation timestamp
     * @type {string}
     * @memberof NewsResponse
     */
    'createdAt': string;
    /**
     * The update timestamp
     * @type {string}
     * @memberof NewsResponse
     */
    'updatedAt': string;
    /**
     * List of permissions the current user has for the News entity
     * @type {Array<string>}
     * @memberof NewsResponse
     */
    'permissions': Array<string>;
}

export const NewsResponseSourceEnum = {
    Internal: 'internal',
    Rss: 'rss'
} as const;

export type NewsResponseSourceEnum = typeof NewsResponseSourceEnum[keyof typeof NewsResponseSourceEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const NewsTargetModel = {
    Schools: 'schools',
    Courses: 'courses',
    Teams: 'teams'
} as const;

export type NewsTargetModel = typeof NewsTargetModel[keyof typeof NewsTargetModel];


/**
 * 
 * @export
 * @interface OAuthTokenDto
 */
export interface OAuthTokenDto {
    /**
     * 
     * @type {string}
     * @memberof OAuthTokenDto
     */
    'idToken': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthTokenDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthTokenDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface Oauth2AuthorizationBodyParams
 */
export interface Oauth2AuthorizationBodyParams {
    /**
     * 
     * @type {string}
     * @memberof Oauth2AuthorizationBodyParams
     */
    'redirectUri': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2AuthorizationBodyParams
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2AuthorizationBodyParams
     */
    'systemId': string;
}
/**
 * 
 * @export
 * @interface Oauth2MigrationParams
 */
export interface Oauth2MigrationParams {
    /**
     * 
     * @type {string}
     * @memberof Oauth2MigrationParams
     */
    'redirectUri': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2MigrationParams
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2MigrationParams
     */
    'systemId': string;
}
/**
 * 
 * @export
 * @interface Oauth2ToolConfigCreateParams
 */
export interface Oauth2ToolConfigCreateParams {
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'baseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'clientSecret': string;
    /**
     * 
     * @type {boolean}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'skipConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'frontchannelLogoutUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'scope'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'redirectUris': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigCreateParams
     */
    'tokenEndpointAuthMethod': string;
}
/**
 * 
 * @export
 * @interface Oauth2ToolConfigUpdateParams
 */
export interface Oauth2ToolConfigUpdateParams {
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'baseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'clientSecret'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'skipConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'frontchannelLogoutUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'scope'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'redirectUris': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Oauth2ToolConfigUpdateParams
     */
    'tokenEndpointAuthMethod': string;
}
/**
 * 
 * @export
 * @interface OauthClientBody
 */
export interface OauthClientBody {
    /**
     * The Oauth2 client id.
     * @type {string}
     * @memberof OauthClientBody
     */
    'client_id'?: string;
    /**
     * The Oauth2 client name.
     * @type {string}
     * @memberof OauthClientBody
     */
    'client_name'?: string;
    /**
     * The Oauth2 client secret.
     * @type {string}
     * @memberof OauthClientBody
     */
    'client_secret'?: string;
    /**
     * The allowed redirect urls of the Oauth2 client.
     * @type {Array<string>}
     * @memberof OauthClientBody
     */
    'redirect_uris'?: Array<string>;
    /**
     * Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
     * @type {string}
     * @memberof OauthClientBody
     */
    'token_endpoint_auth_method'?: string;
    /**
     * SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.
     * @type {string}
     * @memberof OauthClientBody
     */
    'subject_type'?: string;
    /**
     * Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     * @type {string}
     * @memberof OauthClientBody
     */
    'scope'?: string;
    /**
     * Thr frontchannel logout uri.
     * @type {string}
     * @memberof OauthClientBody
     */
    'frontchannel_logout_uri'?: string;
    /**
     * The grant types of the Oauth2 client.
     * @type {Array<string>}
     * @memberof OauthClientBody
     */
    'grant_types'?: Array<string>;
    /**
     * The response types of the Oauth2 client.
     * @type {Array<string>}
     * @memberof OauthClientBody
     */
    'response_types'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OauthClientResponse
 */
export interface OauthClientResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'allowed_cors_origins'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'audience': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'authorization_code_grant_access_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'authorization_code_grant_id_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'authorization_code_grant_refresh_token_lifespan': string;
    /**
     * Boolean value specifying whether the RP requires that a sid (session ID) Claim.
     * @type {boolean}
     * @memberof OauthClientResponse
     */
    'backchannel_logout_session_required': boolean;
    /**
     * RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'backchannel_logout_uri': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'client_credentials_grant_access_token_lifespan': string;
    /**
     * Id of the client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'client_id': string;
    /**
     * Human-readable string name of the client presented to the end-user.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'client_name': string;
    /**
     * SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire.
     * @type {number}
     * @memberof OauthClientResponse
     */
    'client_secret_expires_at': number;
    /**
     * ClientUri is an URL string of a web page providing information about the client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'client_uri': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'contacts'?: Array<string>;
    /**
     * CreatedAt returns the timestamp of the clients creation.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'created_at': string;
    /**
     * Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters.
     * @type {boolean}
     * @memberof OauthClientResponse
     */
    'frontchannel_logout_session_required': boolean;
    /**
     * RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'frontchannel_logout_uri': string;
    /**
     * The grant types of the Oauth2 client.
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'grant_types'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'implicit_grant_access_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'implicit_grant_id_token_lifespan': string;
    /**
     * 
     * @type {object}
     * @memberof OauthClientResponse
     */
    'jwks': object;
    /**
     * URL for the clients JSON Web Key Set [JWK] document
     * @type {string}
     * @memberof OauthClientResponse
     */
    'jwks_uri': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'jwt_bearer_grant_access_token_lifespan': string;
    /**
     * LogoUri is an URL string that references a logo for the client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'logo_uri': string;
    /**
     * 
     * @type {object}
     * @memberof OauthClientResponse
     */
    'metadata': object;
    /**
     * Owner is a string identifying the owner of the OAuth 2.0 Client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'password_grant_access_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'password_grant_refresh_token_lifespan': string;
    /**
     * PolicyUri is a URL string that points to a human-readable privacy policy document
     * @type {string}
     * @memberof OauthClientResponse
     */
    'policy_uri': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'post_logout_redirect_uris'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'redirect_uris'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'refresh_token_grant_access_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'refresh_token_grant_id_token_lifespan': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'refresh_token_grant_refresh_token_lifespan': string;
    /**
     * RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'registration_access_token': string;
    /**
     * RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'registration_client_uri': string;
    /**
     * JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'request_object_signing_alg': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'request_uris'?: Array<string>;
    /**
     * The response types of the Oauth2 client.
     * @type {Array<string>}
     * @memberof OauthClientResponse
     */
    'response_types'?: Array<string>;
    /**
     * Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'scope': string;
    /**
     * URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'sector_identifier_uri': string;
    /**
     * SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'subject_type': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'token_endpoint_auth_method': string;
    /**
     * 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'token_endpoint_auth_signing_alg': string;
    /**
     * TermsOfServiceUri is a URL string that points to a human-readable terms of service document for the client.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'tos_uri': string;
    /**
     * UpdatedAt returns the timestamp of the last update.
     * @type {string}
     * @memberof OauthClientResponse
     */
    'updated_at': string;
    /**
     * JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. 
     * @type {string}
     * @memberof OauthClientResponse
     */
    'userinfo_signed_response_alg': string;
}
/**
 * 
 * @export
 * @interface OauthConfigResponse
 */
export interface OauthConfigResponse {
    /**
     * Client id
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'clientId': string;
    /**
     * Hint for idp redirects (optional)
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'idpHint'?: string | null;
    /**
     * Redirect uri
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'redirectUri': string;
    /**
     * Grant type
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'grantType': string;
    /**
     * Token endpoint
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'tokenEndpoint': string;
    /**
     * Auth endpoint
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'authEndpoint': string;
    /**
     * Response type
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'responseType': string;
    /**
     * Scope
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'scope': string;
    /**
     * Provider
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'provider': string;
    /**
     * Logout endpoint
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'logoutEndpoint'?: string;
    /**
     * Issuer
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'issuer': string;
    /**
     * Jwks endpoint
     * @type {string}
     * @memberof OauthConfigResponse
     */
    'jwksEndpoint': string;
}
/**
 * 
 * @export
 * @interface OidcContextResponse
 */
export interface OidcContextResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcContextResponse
     */
    'acr_values': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcContextResponse
     */
    'display': string;
    /**
     * 
     * @type {object}
     * @memberof OidcContextResponse
     */
    'id_token_hint_claims': object;
    /**
     * 
     * @type {string}
     * @memberof OidcContextResponse
     */
    'login_hint': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcContextResponse
     */
    'ui_locales': Array<string>;
}
/**
 * 
 * @export
 * @interface ParentConsentResponse
 */
export interface ParentConsentResponse {
    /**
     * 
     * @type {string}
     * @memberof ParentConsentResponse
     */
    'form': string;
    /**
     * 
     * @type {boolean}
     * @memberof ParentConsentResponse
     */
    'privacyConsent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ParentConsentResponse
     */
    'termsOfUseConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof ParentConsentResponse
     */
    'dateOfPrivacyConsent': string;
    /**
     * 
     * @type {string}
     * @memberof ParentConsentResponse
     */
    'dateOfTermsOfUseConsent': string;
    /**
     * 
     * @type {string}
     * @memberof ParentConsentResponse
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface PatchGroupParams
 */
export interface PatchGroupParams {
    /**
     * Title of the Group grid element
     * @type {string}
     * @memberof PatchGroupParams
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface PatchMyAccountParams
 */
export interface PatchMyAccountParams {
    /**
     * The current user password to authorize the update action.
     * @type {string}
     * @memberof PatchMyAccountParams
     */
    'passwordOld': string;
    /**
     * The new password for the current user.
     * @type {string}
     * @memberof PatchMyAccountParams
     */
    'passwordNew'?: string | null;
    /**
     * The new email address for the current user.
     * @type {string}
     * @memberof PatchMyAccountParams
     */
    'email'?: string | null;
    /**
     * The new first name for the current user.
     * @type {string}
     * @memberof PatchMyAccountParams
     */
    'firstName'?: string | null;
    /**
     * The new last name for the current user.
     * @type {string}
     * @memberof PatchMyAccountParams
     */
    'lastName'?: string | null;
}
/**
 * 
 * @export
 * @interface PatchMyPasswordParams
 */
export interface PatchMyPasswordParams {
    /**
     * The new user password.
     * @type {string}
     * @memberof PatchMyPasswordParams
     */
    'password': string;
    /**
     * The confirmed new user password. Must match the password field.
     * @type {string}
     * @memberof PatchMyPasswordParams
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface PatchOrderParams
 */
export interface PatchOrderParams {
    /**
     * Array ids determining the new order
     * @type {Array<string>}
     * @memberof PatchOrderParams
     */
    'elements': Array<string>;
}
/**
 * 
 * @export
 * @interface PatchVisibilityParams
 */
export interface PatchVisibilityParams {
    /**
     * true to publish the element, false to unpublish
     * @type {boolean}
     * @memberof PatchVisibilityParams
     */
    'visibility': boolean;
}
/**
 * 
 * @export
 * @interface ProviderConfigResponse
 */
export interface ProviderConfigResponse {
    /**
     * 
     * @type {string}
     * @memberof ProviderConfigResponse
     */
    'provider': string;
}
/**
 * 
 * @export
 * @interface PseudonymResponse
 */
export interface PseudonymResponse {
    /**
     * 
     * @type {string}
     * @memberof PseudonymResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PseudonymResponse
     */
    'toolId': string;
    /**
     * 
     * @type {string}
     * @memberof PseudonymResponse
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface PublicSystemListResponse
 */
export interface PublicSystemListResponse {
    /**
     * 
     * @type {Array<PublicSystemResponse>}
     * @memberof PublicSystemListResponse
     */
    'data': Array<PublicSystemResponse>;
}
/**
 * 
 * @export
 * @interface PublicSystemResponse
 */
export interface PublicSystemResponse {
    /**
     * Id of the system.
     * @type {string}
     * @memberof PublicSystemResponse
     */
    'id': string;
    /**
     * Flag to request only systems with oauth-config.
     * @type {string}
     * @memberof PublicSystemResponse
     */
    'type'?: string | null;
    /**
     * Alias of the system.
     * @type {string}
     * @memberof PublicSystemResponse
     */
    'alias'?: string | null;
    /**
     * Display name of the system.
     * @type {string}
     * @memberof PublicSystemResponse
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {PublicSystemResponseOauthConfig}
     * @memberof PublicSystemResponse
     */
    'oauthConfig'?: PublicSystemResponseOauthConfig | null;
}
/**
 * Oauth config of the system.
 * @export
 * @interface PublicSystemResponseOauthConfig
 */
export interface PublicSystemResponseOauthConfig {
    /**
     * Client id
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'clientId': string;
    /**
     * Hint for idp redirects (optional)
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'idpHint'?: string | null;
    /**
     * Redirect uri
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'redirectUri': string;
    /**
     * Grant type
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'grantType': string;
    /**
     * Token endpoint
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'tokenEndpoint': string;
    /**
     * Auth endpoint
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'authEndpoint': string;
    /**
     * Response type
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'responseType': string;
    /**
     * Scope
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'scope': string;
    /**
     * Provider
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'provider': string;
    /**
     * Logout endpoint
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'logoutEndpoint'?: string;
    /**
     * Issuer
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'issuer': string;
    /**
     * Jwks endpoint
     * @type {string}
     * @memberof PublicSystemResponseOauthConfig
     */
    'jwksEndpoint': string;
}
/**
 * 
 * @export
 * @interface RedirectResponse
 */
export interface RedirectResponse {
    /**
     * RedirectURL is the URL which you should redirect the user to once the authentication process is completed.
     * @type {string}
     * @memberof RedirectResponse
     */
    'redirect_to': string;
}
/**
 * 
 * @export
 * @interface RenameBodyParams
 */
export interface RenameBodyParams {
    /**
     * 
     * @type {string}
     * @memberof RenameBodyParams
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface ResolvedUserResponse
 */
export interface ResolvedUserResponse {
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolvedUserResponse
     */
    'roles': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResolvedUserResponse
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResolvedUserResponse
     */
    'schoolId': string;
}
/**
 * 
 * @export
 * @interface RichText
 */
export interface RichText {
    /**
     * Content of the rich text element
     * @type {string}
     * @memberof RichText
     */
    'content': string;
    /**
     * Input format of the rich text element
     * @type {string}
     * @memberof RichText
     */
    'type': RichTextTypeEnum;
}

export const RichTextTypeEnum = {
    PlainText: 'plainText',
    RichTextCk5Simple: 'richTextCk5Simple',
    RichTextCk4: 'richTextCk4',
    RichTextCk5: 'richTextCk5'
} as const;

export type RichTextTypeEnum = typeof RichTextTypeEnum[keyof typeof RichTextTypeEnum];

/**
 * 
 * @export
 * @interface RichTextContentBody
 */
export interface RichTextContentBody {
    /**
     * 
     * @type {string}
     * @memberof RichTextContentBody
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof RichTextContentBody
     */
    'inputFormat': string;
}
/**
 * 
 * @export
 * @interface RichTextElementContent
 */
export interface RichTextElementContent {
    /**
     * 
     * @type {string}
     * @memberof RichTextElementContent
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof RichTextElementContent
     */
    'inputFormat': string;
}
/**
 * 
 * @export
 * @interface RichTextElementContentBody
 */
export interface RichTextElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof RichTextElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {RichTextContentBody}
     * @memberof RichTextElementContentBody
     */
    'content': RichTextContentBody;
}


/**
 * 
 * @export
 * @interface RichTextElementResponse
 */
export interface RichTextElementResponse {
    /**
     * 
     * @type {string}
     * @memberof RichTextElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof RichTextElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {RichTextElementContent}
     * @memberof RichTextElementResponse
     */
    'content': RichTextElementContent;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof RichTextElementResponse
     */
    'timestamps': TimestampsResponse;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const RoleName = {
    Administrator: 'administrator',
    CourseAdministrator: 'courseAdministrator',
    CourseStudent: 'courseStudent',
    CourseSubstitutionTeacher: 'courseSubstitutionTeacher',
    CourseTeacher: 'courseTeacher',
    Demo: 'demo',
    DemoStudent: 'demoStudent',
    DemoTeacher: 'demoTeacher',
    Expert: 'expert',
    Helpdesk: 'helpdesk',
    Student: 'student',
    Superhero: 'superhero',
    Teacher: 'teacher',
    Teamadministrator: 'teamadministrator',
    Teamexpert: 'teamexpert',
    Teamleader: 'teamleader',
    Teammember: 'teammember',
    Teamowner: 'teamowner',
    User: 'user'
} as const;

export type RoleName = typeof RoleName[keyof typeof RoleName];


/**
 * @type SchoolControllerGetProvisioningOptions200Response
 * @export
 */
export type SchoolControllerGetProvisioningOptions200Response = SchulConneXProvisioningOptionsResponse;

/**
 * 
 * @export
 * @interface SchoolExistsResponse
 */
export interface SchoolExistsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SchoolExistsResponse
     */
    'exists': boolean;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolConfigurationStatusResponse
 */
export interface SchoolExternalToolConfigurationStatusResponse {
    /**
     * Is the tool outdated on school scope, because of non matching versions or required parameter changes on ExternalTool?
     * @type {boolean}
     * @memberof SchoolExternalToolConfigurationStatusResponse
     */
    'isOutdatedOnScopeSchool': boolean;
    /**
     * Is the tool deactivated, because of school administrator?
     * @type {boolean}
     * @memberof SchoolExternalToolConfigurationStatusResponse
     */
    'isDeactivated': boolean;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolConfigurationTemplateListResponse
 */
export interface SchoolExternalToolConfigurationTemplateListResponse {
    /**
     * 
     * @type {Array<SchoolExternalToolConfigurationTemplateResponse>}
     * @memberof SchoolExternalToolConfigurationTemplateListResponse
     */
    'data': Array<SchoolExternalToolConfigurationTemplateResponse>;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolConfigurationTemplateResponse
 */
export interface SchoolExternalToolConfigurationTemplateResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolConfigurationTemplateResponse
     */
    'externalToolId': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolConfigurationTemplateResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolConfigurationTemplateResponse
     */
    'logoUrl'?: string;
    /**
     * 
     * @type {Array<CustomParameterResponse>}
     * @memberof SchoolExternalToolConfigurationTemplateResponse
     */
    'parameters': Array<CustomParameterResponse>;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolMetadataResponse
 */
export interface SchoolExternalToolMetadataResponse {
    /**
     * 
     * @type {ContextExternalToolCountPerContextResponse}
     * @memberof SchoolExternalToolMetadataResponse
     */
    'contextExternalToolCountPerContext': ContextExternalToolCountPerContextResponse;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolPostParams
 */
export interface SchoolExternalToolPostParams {
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolPostParams
     */
    'toolId': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolPostParams
     */
    'schoolId': string;
    /**
     * 
     * @type {Array<CustomParameterEntryParam>}
     * @memberof SchoolExternalToolPostParams
     */
    'parameters'?: Array<CustomParameterEntryParam>;
    /**
     * Tool can be deactivated, related tools can not be added to e.g. course or board anymore
     * @type {boolean}
     * @memberof SchoolExternalToolPostParams
     */
    'isDeactivated': boolean;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolResponse
 */
export interface SchoolExternalToolResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolResponse
     */
    'toolId': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolResponse
     */
    'schoolId': string;
    /**
     * 
     * @type {Array<CustomParameterEntryResponse>}
     * @memberof SchoolExternalToolResponse
     */
    'parameters': Array<CustomParameterEntryResponse>;
    /**
     * 
     * @type {SchoolExternalToolConfigurationStatusResponse}
     * @memberof SchoolExternalToolResponse
     */
    'status': SchoolExternalToolConfigurationStatusResponse;
    /**
     * 
     * @type {string}
     * @memberof SchoolExternalToolResponse
     */
    'logoUrl'?: string;
}
/**
 * 
 * @export
 * @interface SchoolExternalToolSearchListResponse
 */
export interface SchoolExternalToolSearchListResponse {
    /**
     * 
     * @type {Array<SchoolExternalToolResponse>}
     * @memberof SchoolExternalToolSearchListResponse
     */
    'data': Array<SchoolExternalToolResponse>;
}
/**
 * 
 * @export
 * @interface SchoolForExternalInviteResponse
 */
export interface SchoolForExternalInviteResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolForExternalInviteResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForExternalInviteResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface SchoolForLdapLoginResponse
 */
export interface SchoolForLdapLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolForLdapLoginResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolForLdapLoginResponse
     */
    'name': string;
    /**
     * 
     * @type {Array<SystemForLdapLoginResponse>}
     * @memberof SchoolForLdapLoginResponse
     */
    'systems': Array<SystemForLdapLoginResponse>;
}
/**
 * 
 * @export
 * @interface SchoolInfoResponse
 */
export interface SchoolInfoResponse {
    /**
     * The id of the School entity
     * @type {string}
     * @memberof SchoolInfoResponse
     */
    'id': string;
    /**
     * The name of the School entity
     * @type {string}
     * @memberof SchoolInfoResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface SchoolLogo
 */
export interface SchoolLogo {
    /**
     * 
     * @type {string}
     * @memberof SchoolLogo
     */
    'dataUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolLogo
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SchoolPermissionsParams
 */
export interface SchoolPermissionsParams {
    /**
     * 
     * @type {TeacherPermissionParams}
     * @memberof SchoolPermissionsParams
     */
    'teacher'?: TeacherPermissionParams;
    /**
     * 
     * @type {StudentPermissionParams}
     * @memberof SchoolPermissionsParams
     */
    'student'?: StudentPermissionParams;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SchoolPurpose = {
    Expert: 'expert',
    Tombstone: 'tombstone',
    Demo: 'demo',
    Test: 'test',
    MintEc: 'MINT-EC'
} as const;

export type SchoolPurpose = typeof SchoolPurpose[keyof typeof SchoolPurpose];


/**
 * 
 * @export
 * @interface SchoolResponse
 */
export interface SchoolResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'officialSchoolNumber'?: string;
    /**
     * 
     * @type {SchoolYearResponse}
     * @memberof SchoolResponse
     */
    'currentYear'?: SchoolYearResponse;
    /**
     * 
     * @type {FederalStateResponse}
     * @memberof SchoolResponse
     */
    'federalState': FederalStateResponse;
    /**
     * 
     * @type {CountyResponse}
     * @memberof SchoolResponse
     */
    'county'?: CountyResponse;
    /**
     * 
     * @type {SchoolPurpose}
     * @memberof SchoolResponse
     */
    'purpose'?: SchoolPurpose;
    /**
     * 
     * @type {Array<SchoolFeature>}
     * @memberof SchoolResponse
     */
    'features': Array<SchoolFeature>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SchoolResponse
     */
    'systemIds': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolResponse
     */
    'inUserMigration'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolResponse
     */
    'inMaintenance': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolResponse
     */
    'isExternal': boolean;
    /**
     * 
     * @type {SchoolLogo}
     * @memberof SchoolResponse
     */
    'logo'?: SchoolLogo;
    /**
     * 
     * @type {FileStorageType}
     * @memberof SchoolResponse
     */
    'fileStorageType'?: FileStorageType;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolResponse
     */
    'timezone'?: string;
    /**
     * 
     * @type {object}
     * @memberof SchoolResponse
     */
    'permissions'?: object;
    /**
     * 
     * @type {YearsResponse}
     * @memberof SchoolResponse
     */
    'years': YearsResponse;
    /**
     * 
     * @type {Array<InstanceFeature>}
     * @memberof SchoolResponse
     */
    'instanceFeatures': Array<InstanceFeature>;
}


/**
 * 
 * @export
 * @interface SchoolSystemResponse
 */
export interface SchoolSystemResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolSystemResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolSystemResponse
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolSystemResponse
     */
    'alias'?: string;
    /**
     * 
     * @type {ProviderConfigResponse}
     * @memberof SchoolSystemResponse
     */
    'ldapConfig'?: ProviderConfigResponse;
    /**
     * 
     * @type {ProviderConfigResponse}
     * @memberof SchoolSystemResponse
     */
    'oauthConfig'?: ProviderConfigResponse;
}
/**
 * 
 * @export
 * @interface SchoolUpdateBodyParams
 */
export interface SchoolUpdateBodyParams {
    /**
     * 
     * @type {string}
     * @memberof SchoolUpdateBodyParams
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolUpdateBodyParams
     */
    'officialSchoolNumber'?: string;
    /**
     * 
     * @type {SchoolLogo}
     * @memberof SchoolUpdateBodyParams
     */
    'logo'?: SchoolLogo;
    /**
     * 
     * @type {string}
     * @memberof SchoolUpdateBodyParams
     */
    'fileStorageType'?: SchoolUpdateBodyParamsFileStorageTypeEnum;
    /**
     * 
     * @type {LanguageType}
     * @memberof SchoolUpdateBodyParams
     */
    'language'?: LanguageType;
    /**
     * 
     * @type {Array<SchoolFeature>}
     * @memberof SchoolUpdateBodyParams
     */
    'features'?: Array<SchoolFeature>;
    /**
     * 
     * @type {SchoolPermissionsParams}
     * @memberof SchoolUpdateBodyParams
     */
    'permissions'?: SchoolPermissionsParams;
    /**
     * 
     * @type {string}
     * @memberof SchoolUpdateBodyParams
     */
    'countyId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchoolUpdateBodyParams
     */
    'enableStudentTeamCreation'?: boolean;
}

export const SchoolUpdateBodyParamsFileStorageTypeEnum = {
    AwsS3: 'awsS3'
} as const;

export type SchoolUpdateBodyParamsFileStorageTypeEnum = typeof SchoolUpdateBodyParamsFileStorageTypeEnum[keyof typeof SchoolUpdateBodyParamsFileStorageTypeEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const SchoolYearQueryType = {
    NextYear: 'nextYear',
    CurrentYear: 'currentYear',
    PreviousYears: 'previousYears'
} as const;

export type SchoolYearQueryType = typeof SchoolYearQueryType[keyof typeof SchoolYearQueryType];


/**
 * 
 * @export
 * @interface SchoolYearResponse
 */
export interface SchoolYearResponse {
    /**
     * 
     * @type {string}
     * @memberof SchoolYearResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolYearResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolYearResponse
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof SchoolYearResponse
     */
    'endDate': string;
}
/**
 * 
 * @export
 * @interface SchulConneXProvisioningOptionsParams
 */
export interface SchulConneXProvisioningOptionsParams {
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsParams
     */
    'groupProvisioningClassesEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsParams
     */
    'groupProvisioningCoursesEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsParams
     */
    'groupProvisioningOtherEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsParams
     */
    'schoolExternalToolProvisioningEnabled': boolean;
}
/**
 * 
 * @export
 * @interface SchulConneXProvisioningOptionsResponse
 */
export interface SchulConneXProvisioningOptionsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsResponse
     */
    'groupProvisioningClassesEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsResponse
     */
    'groupProvisioningCoursesEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsResponse
     */
    'groupProvisioningOtherEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchulConneXProvisioningOptionsResponse
     */
    'schoolExternalToolProvisioningEnabled': boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SchulcloudTheme = {
    Brb: 'brb',
    Default: 'default',
    N21: 'n21',
    Thr: 'thr'
} as const;

export type SchulcloudTheme = typeof SchulcloudTheme[keyof typeof SchulcloudTheme];


/**
 * 
 * @export
 * @interface SetHeightBodyParams
 */
export interface SetHeightBodyParams {
    /**
     * 
     * @type {number}
     * @memberof SetHeightBodyParams
     */
    'height': number;
}
/**
 * 
 * @export
 * @interface ShareTokenBodyParams
 */
export interface ShareTokenBodyParams {
    /**
     * the type of the object being shared
     * @type {string}
     * @memberof ShareTokenBodyParams
     */
    'parentType': ShareTokenBodyParamsParentTypeEnum;
    /**
     * the id of the object being shared.
     * @type {string}
     * @memberof ShareTokenBodyParams
     */
    'parentId': string;
    /**
     * when defined, the sharetoken will expire after the given number of days.
     * @type {number}
     * @memberof ShareTokenBodyParams
     */
    'expiresInDays'?: number | null;
    /**
     * when defined, the sharetoken will be usable exclusively by members of the users school.
     * @type {boolean}
     * @memberof ShareTokenBodyParams
     */
    'schoolExclusive'?: boolean | null;
}

export const ShareTokenBodyParamsParentTypeEnum = {
    Courses: 'courses',
    Tasks: 'tasks',
    Lessons: 'lessons',
    ColumnBoard: 'columnBoard'
} as const;

export type ShareTokenBodyParamsParentTypeEnum = typeof ShareTokenBodyParamsParentTypeEnum[keyof typeof ShareTokenBodyParamsParentTypeEnum];

/**
 * 
 * @export
 * @interface ShareTokenImportBodyParams
 */
export interface ShareTokenImportBodyParams {
    /**
     * the new name of the imported object.
     * @type {string}
     * @memberof ShareTokenImportBodyParams
     */
    'newName': string;
    /**
     * Id of the course to which the lesson/task will be added
     * @type {string}
     * @memberof ShareTokenImportBodyParams
     */
    'destinationCourseId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShareTokenInfoResponse
 */
export interface ShareTokenInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof ShareTokenInfoResponse
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ShareTokenInfoResponse
     */
    'parentType': ShareTokenInfoResponseParentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ShareTokenInfoResponse
     */
    'parentName': string;
}

export const ShareTokenInfoResponseParentTypeEnum = {
    Courses: 'courses',
    Tasks: 'tasks',
    Lessons: 'lessons',
    ColumnBoard: 'columnBoard'
} as const;

export type ShareTokenInfoResponseParentTypeEnum = typeof ShareTokenInfoResponseParentTypeEnum[keyof typeof ShareTokenInfoResponseParentTypeEnum];

/**
 * 
 * @export
 * @interface ShareTokenPayloadResponse
 */
export interface ShareTokenPayloadResponse {
    /**
     * 
     * @type {string}
     * @memberof ShareTokenPayloadResponse
     */
    'parentType': ShareTokenPayloadResponseParentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ShareTokenPayloadResponse
     */
    'parentId': string;
}

export const ShareTokenPayloadResponseParentTypeEnum = {
    Courses: 'courses',
    Tasks: 'tasks',
    Lessons: 'lessons',
    ColumnBoard: 'columnBoard'
} as const;

export type ShareTokenPayloadResponseParentTypeEnum = typeof ShareTokenPayloadResponseParentTypeEnum[keyof typeof ShareTokenPayloadResponseParentTypeEnum];

/**
 * 
 * @export
 * @interface ShareTokenResponse
 */
export interface ShareTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof ShareTokenResponse
     */
    'token': string;
    /**
     * 
     * @type {ShareTokenPayloadResponse}
     * @memberof ShareTokenResponse
     */
    'payload': ShareTokenPayloadResponse;
    /**
     * 
     * @type {string}
     * @memberof ShareTokenResponse
     */
    'expiresAt'?: string;
}
/**
 * 
 * @export
 * @interface SingleColumnBoardResponse
 */
export interface SingleColumnBoardResponse {
    /**
     * The id of the room this board belongs to
     * @type {string}
     * @memberof SingleColumnBoardResponse
     */
    'roomId': string;
    /**
     * Title of the Board
     * @type {string}
     * @memberof SingleColumnBoardResponse
     */
    'title': string;
    /**
     * Color of the Board
     * @type {string}
     * @memberof SingleColumnBoardResponse
     */
    'displayColor': string;
    /**
     * Array of board specific tasks or lessons with matching type property
     * @type {Array<BoardElementResponse>}
     * @memberof SingleColumnBoardResponse
     */
    'elements': Array<BoardElementResponse>;
    /**
     * Boolean if the room this board belongs to is archived
     * @type {boolean}
     * @memberof SingleColumnBoardResponse
     */
    'isArchived': boolean;
    /**
     * Is the course synchronized with a group?
     * @type {boolean}
     * @memberof SingleColumnBoardResponse
     */
    'isSynchronized': boolean;
}
/**
 * 
 * @export
 * @interface StudentPermissionParams
 */
export interface StudentPermissionParams {
    /**
     * 
     * @type {boolean}
     * @memberof StudentPermissionParams
     */
    'LERNSTORE_VIEW'?: boolean;
}
/**
 * 
 * @export
 * @interface SubmissionContainerContentBody
 */
export interface SubmissionContainerContentBody {
    /**
     * The point in time until when a submission can be handed in.
     * @type {string}
     * @memberof SubmissionContainerContentBody
     */
    'dueDate'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionContainerElementContent
 */
export interface SubmissionContainerElementContent {
    /**
     * The dueDate as date string or null of not set
     * @type {string}
     * @memberof SubmissionContainerElementContent
     */
    'dueDate': string;
}
/**
 * 
 * @export
 * @interface SubmissionContainerElementContentBody
 */
export interface SubmissionContainerElementContentBody {
    /**
     * 
     * @type {ContentElementType}
     * @memberof SubmissionContainerElementContentBody
     */
    'type': ContentElementType;
    /**
     * 
     * @type {SubmissionContainerContentBody}
     * @memberof SubmissionContainerElementContentBody
     */
    'content': SubmissionContainerContentBody;
}


/**
 * 
 * @export
 * @interface SubmissionContainerElementResponse
 */
export interface SubmissionContainerElementResponse {
    /**
     * 
     * @type {string}
     * @memberof SubmissionContainerElementResponse
     */
    'id': string;
    /**
     * 
     * @type {ContentElementType}
     * @memberof SubmissionContainerElementResponse
     */
    'type': ContentElementType;
    /**
     * 
     * @type {SubmissionContainerElementContent}
     * @memberof SubmissionContainerElementResponse
     */
    'content': SubmissionContainerElementContent;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof SubmissionContainerElementResponse
     */
    'timestamps': TimestampsResponse;
}


/**
 * 
 * @export
 * @interface SubmissionItemResponse
 */
export interface SubmissionItemResponse {
    /**
     * 
     * @type {string}
     * @memberof SubmissionItemResponse
     */
    'id': string;
    /**
     * 
     * @type {TimestampsResponse}
     * @memberof SubmissionItemResponse
     */
    'timestamps': TimestampsResponse;
    /**
     * 
     * @type {boolean}
     * @memberof SubmissionItemResponse
     */
    'completed': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubmissionItemResponse
     */
    'userId': string;
    /**
     * 
     * @type {Array<SubmissionItemResponseElementsInner>}
     * @memberof SubmissionItemResponse
     */
    'elements': Array<SubmissionItemResponseElementsInner>;
}
/**
 * @type SubmissionItemResponseElementsInner
 * @export
 */
export type SubmissionItemResponseElementsInner = FileElementResponse | RichTextElementResponse;

/**
 * 
 * @export
 * @interface SubmissionStatusListResponse
 */
export interface SubmissionStatusListResponse {
    /**
     * 
     * @type {Array<SubmissionStatusResponse>}
     * @memberof SubmissionStatusListResponse
     */
    'data': Array<SubmissionStatusResponse>;
}
/**
 * 
 * @export
 * @interface SubmissionStatusResponse
 */
export interface SubmissionStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof SubmissionStatusResponse
     */
    'id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SubmissionStatusResponse
     */
    'submitters': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SubmissionStatusResponse
     */
    'isSubmitted': boolean;
    /**
     * 
     * @type {number}
     * @memberof SubmissionStatusResponse
     */
    'grade'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubmissionStatusResponse
     */
    'isGraded': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubmissionStatusResponse
     */
    'submittingCourseGroupName'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionsResponse
 */
export interface SubmissionsResponse {
    /**
     * 
     * @type {Array<SubmissionItemResponse>}
     * @memberof SubmissionsResponse
     */
    'submissionItemsResponse': Array<SubmissionItemResponse>;
    /**
     * 
     * @type {Array<UserDataResponse>}
     * @memberof SubmissionsResponse
     */
    'users': Array<UserDataResponse>;
}
/**
 * 
 * @export
 * @interface SuccessfulResponse
 */
export interface SuccessfulResponse {
    /**
     * 
     * @type {boolean}
     * @memberof SuccessfulResponse
     */
    'successful': boolean;
}
/**
 * 
 * @export
 * @interface SystemForLdapLoginResponse
 */
export interface SystemForLdapLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof SystemForLdapLoginResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SystemForLdapLoginResponse
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof SystemForLdapLoginResponse
     */
    'alias': string;
}
/**
 * 
 * @export
 * @interface TargetInfoResponse
 */
export interface TargetInfoResponse {
    /**
     * The id of the Target entity
     * @type {string}
     * @memberof TargetInfoResponse
     */
    'id': string;
    /**
     * The name of the Target entity
     * @type {string}
     * @memberof TargetInfoResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TaskCopyApiParams
 */
export interface TaskCopyApiParams {
    /**
     * Destination course parent Id the task is copied to
     * @type {string}
     * @memberof TaskCopyApiParams
     */
    'courseId'?: string;
    /**
     * Destination lesson parent Id the task is copied to
     * @type {string}
     * @memberof TaskCopyApiParams
     */
    'lessonId'?: string;
}
/**
 * 
 * @export
 * @interface TaskListResponse
 */
export interface TaskListResponse {
    /**
     * The items for the current page.
     * @type {Array<TaskResponse>}
     * @memberof TaskListResponse
     */
    'data': Array<TaskResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof TaskListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof TaskListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof TaskListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface TaskResponse
 */
export interface TaskResponse {
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'availableDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'dueDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'courseName': string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'lessonName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'courseId': string;
    /**
     * Task description object, with props content: string and type: input format types
     * @type {RichText}
     * @memberof TaskResponse
     */
    'description'?: RichText;
    /**
     * 
     * @type {boolean}
     * @memberof TaskResponse
     */
    'lessonHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'displayColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TaskResponse
     */
    'updatedAt': string;
    /**
     * 
     * @type {TaskStatusResponse}
     * @memberof TaskResponse
     */
    'status': TaskStatusResponse;
}
/**
 * 
 * @export
 * @interface TaskStatusResponse
 */
export interface TaskStatusResponse {
    /**
     * 
     * @type {number}
     * @memberof TaskStatusResponse
     */
    'submitted': number;
    /**
     * 
     * @type {number}
     * @memberof TaskStatusResponse
     */
    'maxSubmissions': number;
    /**
     * 
     * @type {number}
     * @memberof TaskStatusResponse
     */
    'graded': number;
    /**
     * 
     * @type {boolean}
     * @memberof TaskStatusResponse
     */
    'isDraft': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskStatusResponse
     */
    'isSubstitutionTeacher': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskStatusResponse
     */
    'isFinished': boolean;
}
/**
 * 
 * @export
 * @interface TeacherPermissionParams
 */
export interface TeacherPermissionParams {
    /**
     * 
     * @type {boolean}
     * @memberof TeacherPermissionParams
     */
    'STUDENT_LIST'?: boolean;
}
/**
 * 
 * @export
 * @interface TeamPermissionsBody
 */
export interface TeamPermissionsBody {
    /**
     * 
     * @type {boolean}
     * @memberof TeamPermissionsBody
     */
    'read': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPermissionsBody
     */
    'write': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPermissionsBody
     */
    'create': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPermissionsBody
     */
    'delete': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TeamPermissionsBody
     */
    'share': boolean;
}
/**
 * 
 * @export
 * @interface TimestampsResponse
 */
export interface TimestampsResponse {
    /**
     * 
     * @type {string}
     * @memberof TimestampsResponse
     */
    'lastUpdatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TimestampsResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TimestampsResponse
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Timezone = {
    EuropeBerlin: 'Europe/Berlin'
} as const;

export type Timezone = typeof Timezone[keyof typeof Timezone];


/**
 * 
 * @export
 * @enum {string}
 */

export const ToolConfigType = {
    Basic: 'basic',
    Oauth2: 'oauth2',
    Lti11: 'lti11'
} as const;

export type ToolConfigType = typeof ToolConfigType[keyof typeof ToolConfigType];


/**
 * 
 * @export
 * @enum {string}
 */

export const ToolContextType = {
    Course: 'course',
    BoardElement: 'board-element',
    MediaBoard: 'media-board'
} as const;

export type ToolContextType = typeof ToolContextType[keyof typeof ToolContextType];


/**
 * 
 * @export
 * @interface ToolContextTypesListResponse
 */
export interface ToolContextTypesListResponse {
    /**
     * 
     * @type {Array<ToolContextType>}
     * @memberof ToolContextTypesListResponse
     */
    'data': Array<ToolContextType>;
}
/**
 * 
 * @export
 * @interface ToolLaunchRequestResponse
 */
export interface ToolLaunchRequestResponse {
    /**
     * The Launch Request method (GET or POST)
     * @type {string}
     * @memberof ToolLaunchRequestResponse
     */
    'method': ToolLaunchRequestResponseMethodEnum;
    /**
     * The URL for the Tool Launch Request
     * @type {string}
     * @memberof ToolLaunchRequestResponse
     */
    'url': string;
    /**
     * The payload for the Tool Launch Request (optional)
     * @type {string}
     * @memberof ToolLaunchRequestResponse
     */
    'payload'?: string;
    /**
     * Specifies whether the Tool should be launched in a new tab
     * @type {boolean}
     * @memberof ToolLaunchRequestResponse
     */
    'openNewTab'?: boolean;
}

export const ToolLaunchRequestResponseMethodEnum = {
    Get: 'GET',
    Post: 'POST'
} as const;

export type ToolLaunchRequestResponseMethodEnum = typeof ToolLaunchRequestResponseMethodEnum[keyof typeof ToolLaunchRequestResponseMethodEnum];

/**
 * 
 * @export
 * @interface ToolReferenceListResponse
 */
export interface ToolReferenceListResponse {
    /**
     * 
     * @type {Array<ToolReferenceResponse>}
     * @memberof ToolReferenceListResponse
     */
    'data': Array<ToolReferenceResponse>;
}
/**
 * 
 * @export
 * @interface ToolReferenceResponse
 */
export interface ToolReferenceResponse {
    /**
     * The id of the tool in the context
     * @type {string}
     * @memberof ToolReferenceResponse
     */
    'contextToolId': string;
    /**
     * The description of the tool
     * @type {string}
     * @memberof ToolReferenceResponse
     */
    'description'?: string;
    /**
     * The url of the logo which is stored in the db
     * @type {string}
     * @memberof ToolReferenceResponse
     */
    'logoUrl'?: string;
    /**
     * The display name of the tool
     * @type {string}
     * @memberof ToolReferenceResponse
     */
    'displayName': string;
    /**
     * Whether the tool should be opened in a new tab
     * @type {boolean}
     * @memberof ToolReferenceResponse
     */
    'openInNewTab': boolean;
    /**
     * The status of the tool
     * @type {ContextExternalToolConfigurationStatusResponse}
     * @memberof ToolReferenceResponse
     */
    'status': ContextExternalToolConfigurationStatusResponse;
}
/**
 * 
 * @export
 * @interface UpdateBoardTitleParams
 */
export interface UpdateBoardTitleParams {
    /**
     * 
     * @type {string}
     * @memberof UpdateBoardTitleParams
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface UpdateElementContentBodyParams
 */
export interface UpdateElementContentBodyParams {
    /**
     * 
     * @type {UpdateElementContentBodyParamsData}
     * @memberof UpdateElementContentBodyParams
     */
    'data': UpdateElementContentBodyParamsData;
}
/**
 * @type UpdateElementContentBodyParamsData
 * @export
 */
export type UpdateElementContentBodyParamsData = DrawingElementContentBody | ExternalToolElementContentBody | FileElementContentBody | LinkElementContentBody | RichTextElementContentBody | SubmissionContainerElementContentBody;

/**
 * 
 * @export
 * @interface UpdateFlagParams
 */
export interface UpdateFlagParams {
    /**
     * updates flag for an import user
     * @type {boolean}
     * @memberof UpdateFlagParams
     */
    'flagged': boolean;
}
/**
 * 
 * @export
 * @interface UpdateMatchParams
 */
export interface UpdateMatchParams {
    /**
     * updates local user reference for an import user
     * @type {string}
     * @memberof UpdateMatchParams
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UpdateNewsParams
 */
export interface UpdateNewsParams {
    /**
     * Title of the News entity
     * @type {string}
     * @memberof UpdateNewsParams
     */
    'title'?: string;
    /**
     * Content of the News entity
     * @type {string}
     * @memberof UpdateNewsParams
     */
    'content'?: string;
    /**
     * The point in time from when the News entity schould be displayed
     * @type {string}
     * @memberof UpdateNewsParams
     */
    'displayAt'?: string;
}
/**
 * 
 * @export
 * @interface UpdateSubmissionItemBodyParams
 */
export interface UpdateSubmissionItemBodyParams {
    /**
     * Boolean indicating whether the submission is completed.
     * @type {boolean}
     * @memberof UpdateSubmissionItemBodyParams
     */
    'completed': boolean;
}
/**
 * 
 * @export
 * @interface UserConsentResponse
 */
export interface UserConsentResponse {
    /**
     * 
     * @type {string}
     * @memberof UserConsentResponse
     */
    'form': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserConsentResponse
     */
    'privacyConsent': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserConsentResponse
     */
    'termsOfUseConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserConsentResponse
     */
    'dateOfPrivacyConsent': string;
    /**
     * 
     * @type {string}
     * @memberof UserConsentResponse
     */
    'dateOfTermsOfUseConsent': string;
}
/**
 * 
 * @export
 * @interface UserDataResponse
 */
export interface UserDataResponse {
    /**
     * 
     * @type {string}
     * @memberof UserDataResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDataResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDataResponse
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * The id of the User entity
     * @type {string}
     * @memberof UserInfoResponse
     */
    'id': string;
    /**
     * First name of the user
     * @type {string}
     * @memberof UserInfoResponse
     */
    'firstName'?: string;
    /**
     * Last name of the user
     * @type {string}
     * @memberof UserInfoResponse
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface UserListResponse
 */
export interface UserListResponse {
    /**
     * The items for the current page.
     * @type {Array<UserResponse>}
     * @memberof UserListResponse
     */
    'data': Array<UserResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof UserListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof UserListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof UserListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface UserLoginMigrationMandatoryParams
 */
export interface UserLoginMigrationMandatoryParams {
    /**
     * 
     * @type {boolean}
     * @memberof UserLoginMigrationMandatoryParams
     */
    'mandatory': boolean;
}
/**
 * 
 * @export
 * @interface UserLoginMigrationResponse
 */
export interface UserLoginMigrationResponse {
    /**
     * Id of the migration
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'id': string;
    /**
     * Id of the system which is the origin of the migration
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'sourceSystemId'?: string;
    /**
     * Id of the system which is the target of the migration
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'targetSystemId': string;
    /**
     * Date when the migration was marked as required
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'mandatorySince'?: string;
    /**
     * Date when the migration was started
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'startedAt': string;
    /**
     * Date when the migration was completed
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'closedAt'?: string;
    /**
     * Date when the migration was completed including the grace period
     * @type {string}
     * @memberof UserLoginMigrationResponse
     */
    'finishedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginMigrationSearchListResponse
 */
export interface UserLoginMigrationSearchListResponse {
    /**
     * Contains user login migration responses
     * @type {Array<UserLoginMigrationResponse>}
     * @memberof UserLoginMigrationSearchListResponse
     */
    'data': Array<UserLoginMigrationResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof UserLoginMigrationSearchListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof UserLoginMigrationSearchListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof UserLoginMigrationSearchListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface UserMatchListResponse
 */
export interface UserMatchListResponse {
    /**
     * The items for the current page.
     * @type {Array<UserMatchResponse>}
     * @memberof UserMatchListResponse
     */
    'data': Array<UserMatchResponse>;
    /**
     * The total amount of items.
     * @type {number}
     * @memberof UserMatchListResponse
     */
    'total': number;
    /**
     * The amount of items skipped from the start.
     * @type {number}
     * @memberof UserMatchListResponse
     */
    'skip': number;
    /**
     * The page size of the response.
     * @type {number}
     * @memberof UserMatchListResponse
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface UserMatchResponse
 */
export interface UserMatchResponse {
    /**
     * local user id
     * @type {string}
     * @memberof UserMatchResponse
     */
    'userId': string;
    /**
     * login name of local user
     * @type {string}
     * @memberof UserMatchResponse
     */
    'loginName': string;
    /**
     * firstname of local user
     * @type {string}
     * @memberof UserMatchResponse
     */
    'firstName': string;
    /**
     * lastname of local user
     * @type {string}
     * @memberof UserMatchResponse
     */
    'lastName': string;
    /**
     * list of user roles from external system: student, teacher, admin
     * @type {Array<string>}
     * @memberof UserMatchResponse
     */
    'roleNames': Array<UserMatchResponseRoleNamesEnum>;
    /**
     * match type: admin (manual) or auto (set, when names match exactly for a single user
     * @type {string}
     * @memberof UserMatchResponse
     */
    'matchedBy'?: UserMatchResponseMatchedByEnum;
}

export const UserMatchResponseRoleNamesEnum = {
    Student: 'student',
    Teacher: 'teacher',
    Admin: 'admin'
} as const;

export type UserMatchResponseRoleNamesEnum = typeof UserMatchResponseRoleNamesEnum[keyof typeof UserMatchResponseRoleNamesEnum];
export const UserMatchResponseMatchedByEnum = {
    Auto: 'auto',
    Admin: 'admin'
} as const;

export type UserMatchResponseMatchedByEnum = typeof UserMatchResponseMatchedByEnum[keyof typeof UserMatchResponseMatchedByEnum];

/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'birthday': string;
    /**
     * 
     * @type {object}
     * @memberof UserResponse
     */
    'preferences': object;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'consentStatus': string;
    /**
     * 
     * @type {ConsentsResponse}
     * @memberof UserResponse
     */
    'consent': ConsentsResponse;
    /**
     * 
     * @type {Array<ClassResponse>}
     * @memberof UserResponse
     */
    'classes': Array<ClassResponse>;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'importHash': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastLoginSystemChange': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'outdatedSince': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * The response status code.
     * @type {number}
     * @memberof ValidationError
     */
    'code': number;
    /**
     * The error type.
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
    /**
     * The error title.
     * @type {string}
     * @memberof ValidationError
     */
    'title': string;
    /**
     * The error message.
     * @type {string}
     * @memberof ValidationError
     */
    'message': string;
    /**
     * The error details.
     * @type {object}
     * @memberof ValidationError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface VideoConferenceCreateParams
 */
export interface VideoConferenceCreateParams {
    /**
     * 
     * @type {boolean}
     * @memberof VideoConferenceCreateParams
     */
    'everyAttendeeJoinsMuted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VideoConferenceCreateParams
     */
    'everybodyJoinsAsModerator'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VideoConferenceCreateParams
     */
    'moderatorMustApproveJoinRequests'?: boolean;
    /**
     * The URL that the BigBlueButton client will go to after users click the OK button on the ‘You have been logged out’ or ’This session was ended’ message. Has to be a URL from the same domain that the conference is started from.
     * @type {string}
     * @memberof VideoConferenceCreateParams
     */
    'logoutUrl'?: string;
}
/**
 * 
 * @export
 * @interface VideoConferenceInfoResponse
 */
export interface VideoConferenceInfoResponse {
    /**
     * 
     * @type {VideoConferenceStateResponse}
     * @memberof VideoConferenceInfoResponse
     */
    'state': VideoConferenceStateResponse;
    /**
     * The options for the video conference.
     * @type {VideoConferenceOptionsResponse}
     * @memberof VideoConferenceInfoResponse
     */
    'options': VideoConferenceOptionsResponse;
}


/**
 * 
 * @export
 * @interface VideoConferenceJoinResponse
 */
export interface VideoConferenceJoinResponse {
    /**
     * The URL to join the video conference.
     * @type {string}
     * @memberof VideoConferenceJoinResponse
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface VideoConferenceOptionsResponse
 */
export interface VideoConferenceOptionsResponse {
    /**
     * Every attendee joins muted
     * @type {boolean}
     * @memberof VideoConferenceOptionsResponse
     */
    'everyAttendeeJoinsMuted': boolean;
    /**
     * Every attendee joins as a moderator
     * @type {boolean}
     * @memberof VideoConferenceOptionsResponse
     */
    'everybodyJoinsAsModerator': boolean;
    /**
     * Moderator must approve join requests
     * @type {boolean}
     * @memberof VideoConferenceOptionsResponse
     */
    'moderatorMustApproveJoinRequests': boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const VideoConferenceScope = {
    Course: 'course',
    Event: 'event'
} as const;

export type VideoConferenceScope = typeof VideoConferenceScope[keyof typeof VideoConferenceScope];


/**
 * 
 * @export
 * @enum {string}
 */

export const VideoConferenceStateResponse = {
    NotStarted: 'NOT_STARTED',
    Running: 'RUNNING',
    Finished: 'FINISHED'
} as const;

export type VideoConferenceStateResponse = typeof VideoConferenceStateResponse[keyof typeof VideoConferenceStateResponse];


/**
 * 
 * @export
 * @interface VisibilityBodyParams
 */
export interface VisibilityBodyParams {
    /**
     * 
     * @type {boolean}
     * @memberof VisibilityBodyParams
     */
    'isVisible': boolean;
}
/**
 * 
 * @export
 * @interface VisibilitySettingsResponse
 */
export interface VisibilitySettingsResponse {
    /**
     * 
     * @type {string}
     * @memberof VisibilitySettingsResponse
     */
    'publishedAt'?: string;
}
/**
 * 
 * @export
 * @interface YearsResponse
 */
export interface YearsResponse {
    /**
     * 
     * @type {Array<SchoolYearResponse>}
     * @memberof YearsResponse
     */
    'schoolYears': Array<SchoolYearResponse>;
    /**
     * 
     * @type {SchoolYearResponse}
     * @memberof YearsResponse
     */
    'activeYear': SchoolYearResponse;
    /**
     * 
     * @type {SchoolYearResponse}
     * @memberof YearsResponse
     */
    'lastYear': SchoolYearResponse;
    /**
     * 
     * @type {SchoolYearResponse}
     * @memberof YearsResponse
     */
    'nextYear': SchoolYearResponse;
}

/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks if user is authorized to perform the given operation.
         * @param {AuthorizationBodyParams} authorizationBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationReferenceControllerAuthorizeByReference: async (authorizationBodyParams: AuthorizationBodyParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationBodyParams' is not null or undefined
            assertParamExists('authorizationReferenceControllerAuthorizeByReference', 'authorizationBodyParams', authorizationBodyParams)
            const localVarPath = `/authorization/by-reference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizationBodyParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks if user is authorized to perform the given operation.
         * @param {AuthorizationBodyParams} authorizationBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams: AuthorizationBodyParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizedReponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.authorizationReferenceControllerAuthorizeByReference']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks if user is authorized to perform the given operation.
         * @param {AuthorizationBodyParams} authorizationBodyParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams: AuthorizationBodyParams, options?: any): AxiosPromise<AuthorizedReponse> {
            return localVarFp.authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 
     * @summary Checks if user is authorized to perform the given operation.
     * @param {AuthorizationBodyParams} authorizationBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams: AuthorizationBodyParams, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).authorizationReferenceControllerAuthorizeByReference(authorizationBodyParams, options).then((request) => request(this.axios, this.basePath));
    }
}



