module.exports = {
	'import/no-unresolved': [
		'off',
		{
			commonjs: true,
			caseSensitive: true,
			caseSensitiveStrict: false,
		},
	],
	'import/no-extraneous-dependencies': [
		'off',
		{
			devDependencies: [
				'test/**',
				'tests/**',
				'spec/**',
				'**/__tests__/**',
				'**/__mocks__/**',
				'test.{js,jsx}',
				'test.{ts,tsx}',
				'test-*.{js,jsx}',
				'test-*.{ts,tsx}',
				'**/*{.,_}{test,spec}.{js,jsx}',
				'**/*{.,_}{test,spec}.{ts,tsx}',
				'**/jest.config.js',
				'**/jest.config.ts',
				'**/jest.setup.js',
				'**/jest.setup.ts',
				'**/vue.config.js',
				'**/vue.config.ts',
				'**/webpack.config.js',
				'**/webpack.config.ts',
				'**/webpack.config.*.js',
				'**/webpack.config.*.ts',
				'**/rollup.config.js',
				'**/rollup.config.ts',
				'**/rollup.config.*.js',
				'**/rollup.config.*.ts',
				'**/gulpfile.js',
				'**/gulpfile.ts',
				'**/gulpfile.*.js',
				'**/gulpfile.*.ts',
				'**/Gruntfile{,.js}',
				'**/Gruntfile{,.ts}',
				'**/protractor.conf.js',
				'**/protractor.conf.ts',
				'**/protractor.conf.*.js',
				'**/protractor.conf.*.ts',
				'**/karma.conf.js',
				'**/karma.conf.ts',
				'**/.eslintrc.js',
				'**/.eslintrc.ts',
			],
			optionalDependencies: false,
		},
	],
	'class-methods-use-this': [
		'off',
		{
			exceptMethods: {},
			enforceForClassFields: true,
		},
	],
	'@typescript-eslint/no-unused-vars': [
		'error',
		{
			vars: 'all',
			args: 'after-used',
			ignoreRestSiblings: true,
		},
	],
	curly: [0, 'multi-line'],
	'max-len': [
		0,
		100,
		2,
		{
			ignoreUrls: true,
			ignoreComments: false,
			ignoreRegExpLiterals: true,
			ignoreStrings: true,
			ignoreTemplateLiterals: true,
		},
	],
	'no-confusing-arrow': [
		0,
		{
			allowParens: true,
			onlyOneSimpleParam: false,
		},
	],
	'no-mixed-operators': [
		0,
		{
			groups: {},
			allowSamePrecedence: false,
		},
	],
	quotes: [
		0,
		'single',
		{
			avoidEscape: true,
		},
	],
	'@typescript-eslint/quotes': [
		0,
		'single',
		{
			avoidEscape: true,
		},
	],
	'array-bracket-newline': ['off', 'consistent'],
	'array-bracket-spacing': ['off', 'never'],
	'array-element-newline': [
		'off',
		{
			multiline: true,
			minItems: 3,
		},
	],
	'arrow-spacing': [
		'off',
		{
			before: true,
			after: true,
		},
	],
	'block-spacing': ['off', 'always'],
	'brace-style': [
		'off',
		'1tbs',
		{
			allowSingleLine: true,
		},
	],
	'class-methods-use-this': [
		'off',
		{
			exceptMethods: {},
			enforceForClassFields: true,
		},
	],
	'comma-dangle': [
		'off',
		{
			arrays: 'always-multiline',
			objects: 'always-multiline',
			imports: 'always-multiline',
			exports: 'always-multiline',
			functions: 'always-multiline',
		},
	],
	'comma-spacing': [
		'off',
		{
			before: false,
			after: true,
		},
	],
	'comma-style': [
		'off',
		'last',
		{
			exceptions: {
				ArrayExpression: false,
				ArrayPattern: false,
				ArrowFunctionExpression: false,
				CallExpression: false,
				FunctionDeclaration: false,
				FunctionExpression: false,
				ImportDeclaration: false,
				ObjectExpression: false,
				ObjectPattern: false,
				VariableDeclaration: false,
				NewExpression: false,
			},
		},
	],
	'computed-property-spacing': ['off', 'never'],
	'dot-location': ['off', 'property'],
	'eol-last': ['off', 'always'],
	'func-call-spacing': ['off', 'never'],
	'function-call-argument-newline': ['off', 'consistent'],
	'function-paren-newline': ['off', 'multiline-arguments'],
	'generator-star-spacing': [
		'off',
		{
			before: false,
			after: true,
		},
	],
	'implicit-arrow-linebreak': ['off', 'beside'],
	indent: [
		'off',
		2,
		{
			SwitchCase: 1,
			VariableDeclarator: 1,
			outerIIFEBody: 1,
			FunctionDeclaration: {
				parameters: 1,
				body: 1,
			},
			FunctionExpression: {
				parameters: 1,
				body: 1,
			},
			CallExpression: {
				arguments: 1,
			},
			ArrayExpression: 1,
			ObjectExpression: 1,
			ImportDeclaration: 1,
			flatTernaryExpressions: false,
			ignoredNodes: [
				'JSXElement',
				'JSXElement > *',
				'JSXAttribute',
				'JSXIdentifier',
				'JSXNamespacedName',
				'JSXMemberExpression',
				'JSXSpreadAttribute',
				'JSXExpressionContainer',
				'JSXOpeningElement',
				'JSXClosingElement',
				'JSXFragment',
				'JSXOpeningFragment',
				'JSXClosingFragment',
				'JSXText',
				'JSXEmptyExpression',
				'JSXSpreadChild',
			],
			ignoreComments: false,
			offsetTernaryExpressions: false,
		},
	],
	'jsx-quotes': ['off', 'prefer-double'],
	'key-spacing': [
		'off',
		{
			beforeColon: false,
			afterColon: true,
		},
	],
	'keyword-spacing': [
		'off',
		{
			before: true,
			after: true,
			overrides: {
				return: {
					after: true,
				},
				throw: {
					after: true,
				},
				case: {
					after: true,
				},
			},
		},
	],
	'linebreak-style': ['off', 'unix'],
	'max-statements-per-line': [
		'off',
		{
			max: 1,
		},
	],
	'multiline-ternary': ['off', 'never'],
	'newline-per-chained-call': [
		'off',
		{
			ignoreChainWithDepth: 4,
		},
	],
	'no-extra-parens': [
		'off',
		'all',
		{
			conditionalAssign: true,
			nestedBinaryExpressions: false,
			returnAssign: false,
			ignoreJSX: 'all',
			enforceForArrowConditionals: false,
		},
	],
	'no-multi-spaces': [
		'off',
		{
			ignoreEOLComments: false,
		},
	],
	'no-trailing-spaces': [
		'off',
		{
			skipBlankLines: false,
			ignoreComments: false,
		},
	],
	'nonblock-statement-body-position': [
		'off',
		'beside',
		{
			overrides: {},
		},
	],
	'object-curly-newline': [
		'off',
		{
			ObjectExpression: {
				minProperties: 4,
				multiline: true,
				consistent: true,
			},
			ObjectPattern: {
				minProperties: 4,
				multiline: true,
				consistent: true,
			},
			ImportDeclaration: {
				minProperties: 4,
				multiline: true,
				consistent: true,
			},
			ExportDeclaration: {
				minProperties: 4,
				multiline: true,
				consistent: true,
			},
		},
	],
	'object-curly-spacing': ['off', 'always'],
	'object-property-newline': [
		'off',
		{
			allowAllPropertiesOnSameLine: true,
			allowMultiplePropertiesPerLine: false,
		},
	],
	'one-var-declaration-per-line': ['off', 'always'],
	'operator-linebreak': [
		'off',
		'before',
		{
			overrides: {
				'=': 'none',
			},
		},
	],
	'padded-blocks': [
		'off',
		{
			blocks: 'never',
			classes: 'never',
			switches: 'never',
		},
		{
			allowSingleLineBlocks: true,
		},
	],
	'quote-props': [
		'off',
		'as-needed',
		{
			keywords: false,
			unnecessary: true,
			numbers: false,
		},
	],
	'rest-spread-spacing': ['off', 'never'],
	semi: ['off', 'always'],
	'semi-spacing': [
		'off',
		{
			before: false,
			after: true,
		},
	],
	'semi-style': ['off', 'last'],
	'space-before-function-paren': [
		'off',
		{
			anonymous: 'always',
			named: 'never',
			asyncArrow: 'always',
		},
	],
	'space-in-parens': ['off', 'never'],
	'space-unary-ops': [
		'off',
		{
			words: true,
			nonwords: false,
			overrides: {},
		},
	],
	'switch-colon-spacing': [
		'off',
		{
			after: true,
			before: false,
		},
	],
	'template-tag-spacing': ['off', 'never'],
	'unicode-bom': ['off', 'never'],
	'wrap-iife': [
		'off',
		'outside',
		{
			functionPrototypeMethods: false,
		},
	],
	'yield-star-spacing': ['off', 'after'],
	'@typescript-eslint/brace-style': [
		'off',
		'1tbs',
		{
			allowSingleLine: true,
		},
	],
	'@typescript-eslint/comma-dangle': [
		'off',
		{
			arrays: 'always-multiline',
			objects: 'always-multiline',
			imports: 'always-multiline',
			exports: 'always-multiline',
			functions: 'always-multiline',
			enums: 'always-multiline',
			generics: 'always-multiline',
			tuples: 'always-multiline',
		},
	],
	'@typescript-eslint/comma-spacing': [
		'off',
		{
			before: false,
			after: true,
		},
	],
	'@typescript-eslint/func-call-spacing': ['off', 'never'],
	'@typescript-eslint/indent': [
		'off',
		2,
		{
			SwitchCase: 1,
			VariableDeclarator: 1,
			outerIIFEBody: 1,
			FunctionDeclaration: {
				parameters: 1,
				body: 1,
			},
			FunctionExpression: {
				parameters: 1,
				body: 1,
			},
			CallExpression: {
				arguments: 1,
			},
			ArrayExpression: 1,
			ObjectExpression: 1,
			ImportDeclaration: 1,
			flatTernaryExpressions: false,
			ignoredNodes: [
				'JSXElement',
				'JSXElement > *',
				'JSXAttribute',
				'JSXIdentifier',
				'JSXNamespacedName',
				'JSXMemberExpression',
				'JSXSpreadAttribute',
				'JSXExpressionContainer',
				'JSXOpeningElement',
				'JSXClosingElement',
				'JSXFragment',
				'JSXOpeningFragment',
				'JSXClosingFragment',
				'JSXText',
				'JSXEmptyExpression',
				'JSXSpreadChild',
			],
			ignoreComments: false,
			offsetTernaryExpressions: false,
		},
	],
	'@typescript-eslint/keyword-spacing': [
		'off',
		{
			before: true,
			after: true,
			overrides: {
				return: {
					after: true,
				},
				throw: {
					after: true,
				},
				case: {
					after: true,
				},
			},
		},
	],
	'@typescript-eslint/no-extra-parens': [
		'off',
		'all',
		{
			conditionalAssign: true,
			nestedBinaryExpressions: false,
			returnAssign: false,
			ignoreJSX: 'all',
			enforceForArrowConditionals: false,
		},
	],
	'@typescript-eslint/object-curly-spacing': ['off', 'always'],
	'@typescript-eslint/semi': ['off', 'always'],
	'@typescript-eslint/space-before-function-paren': [
		'off',
		{
			anonymous: 'always',
			named: 'never',
			asyncArrow: 'always',
		},
	],
	'getter-return': [
		'off',
		{
			allowImplicit: true,
		},
	],
	'prefer-const': [
		'error',
		{
			destructuring: 'any',
			ignoreReadBeforeAssign: true,
		},
	],
	'valid-typeof': [
		'off',
		{
			requireStringLiterals: true,
		},
	],
	'no-empty-function': ['off'],
	'@typescript-eslint/no-empty-function': ['error'],
	'import/no-named-as-default-member': ['off'],
	camelcase: [
		'off',
		{
			properties: 'never',
			ignoreDestructuring: false,
			ignoreImports: false,
			ignoreGlobals: false,
		},
	],
	'@typescript-eslint/naming-convention': [
		'error',
		{
			selector: 'variable',
			format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
		},
		{
			selector: 'function',
			format: ['camelCase', 'PascalCase'],
		},
		{
			selector: 'typeLike',
			format: ['PascalCase'],
		},
	],
	'default-param-last': ['off'],
	'@typescript-eslint/default-param-last': ['error'],
	'dot-notation': [
		'off',
		{
			allowKeywords: true,
			allowPattern: '',
			allowPrivateClassPropertyAccess: false,
			allowProtectedClassPropertyAccess: false,
			allowIndexSignaturePropertyAccess: false,
		},
	],
	'@typescript-eslint/dot-notation': [
		'error',
		{
			allowKeywords: true,
			allowPattern: '',
			allowPrivateClassPropertyAccess: false,
			allowProtectedClassPropertyAccess: false,
			allowIndexSignaturePropertyAccess: false,
		},
	],
	'lines-between-class-members': [
		'off',
		'always',
		{
			exceptAfterSingleLine: false,
		},
	],
	'@typescript-eslint/lines-between-class-members': [
		'error',
		'always',
		{
			exceptAfterSingleLine: false,
		},
	],
	'@typescript-eslint/no-dupe-class-members': ['error'],
	'no-new-func': ['off'],
	'no-loop-func': ['off'],
	'@typescript-eslint/no-loop-func': ['error'],
	'no-magic-numbers': [
		'off',
		{
			ignore: {},
			ignoreArrayIndexes: true,
			enforceConst: true,
			detectObjects: false,
		},
	],
	'@typescript-eslint/no-magic-numbers': [
		'off',
		{
			ignore: {},
			ignoreArrayIndexes: true,
			enforceConst: true,
			detectObjects: false,
		},
	],
	'@typescript-eslint/no-redeclare': ['error'],
	'no-shadow': [
		'off',
		{
			allow: ['err', 'error'],
			builtinGlobals: false,
			hoist: 'functions',
			ignoreOnInitialization: false,
		},
	],
	'no-throw-literal': ['off'],
	'@typescript-eslint/no-throw-literal': ['error'],
	'no-unused-expressions': [
		'off',
		{
			allowShortCircuit: false,
			allowTernary: false,
			allowTaggedTemplates: false,
			enforceForJSX: false,
		},
	],
	'@typescript-eslint/no-unused-expressions': [
		'error',
		{
			allowShortCircuit: false,
			allowTernary: false,
			allowTaggedTemplates: false,
			enforceForJSX: false,
		},
	],
	'no-use-before-define': [
		'off',
		{
			functions: true,
			classes: true,
			variables: true,
		},
	],
	'@typescript-eslint/no-use-before-define': [
		'error',
		{
			functions: true,
			classes: true,
			variables: true,
		},
	],
	'no-useless-constructor': ['off'],
	'@typescript-eslint/no-useless-constructor': ['error'],
	'no-return-await': ['off'],
	'@typescript-eslint/return-await': ['error', 'in-try-catch'],
	'import/extensions': [
		'error',
		'ignorePackages',
		{
			js: 'never',
			mjs: 'never',
			jsx: 'never',
			ts: 'never',
			tsx: 'never',
		},
	],
	'no-restricted-syntax': [
		'off',
		{
			selector: 'ForInStatement',
			message:
				'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
		},
		{
			selector: 'ForOfStatement',
			message:
				'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
		},
		{
			selector: 'LabeledStatement',
			message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
		},
		{
			selector: 'WithStatement',
			message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
		},
	],
	'max-classes-per-file': ['off', 1],
	strict: ['error', 'never'],
	'import/default': ['off'],
	'import/namespace': ['off'],
	'import/export': ['error'],
	'import/no-named-as-default': ['error'],
	'import/no-deprecated': ['off'],
	'import/no-mutable-exports': ['error'],
	'import/no-commonjs': ['off'],
	'import/no-amd': ['error'],
	'import/no-nodejs-modules': ['off'],
	'import/first': ['error'],
	'import/imports-first': ['off'],
	'import/no-duplicates': ['error'],
	'import/no-namespace': ['off'],
	'import/order': [
		'error',
		{
			groups: [['builtin', 'external', 'internal']],
			distinctGroup: true,
			named: false,
			warnOnUnassignedImports: false,
		},
	],
	'import/newline-after-import': ['error'],
	'import/no-restricted-paths': ['off'],
	'import/max-dependencies': [
		'off',
		{
			max: 10,
		},
	],
	'import/no-absolute-path': ['error'],
	'import/no-dynamic-require': ['error'],
	'import/no-internal-modules': [
		'off',
		{
			allow: {},
		},
	],
	'import/unambiguous': ['off'],
	'import/no-webpack-loader-syntax': ['error'],
	'import/no-unassigned-import': ['off'],
	'import/no-named-default': ['error'],
	'import/no-anonymous-default-export': [
		'off',
		{
			allowArray: false,
			allowArrowFunction: false,
			allowAnonymousClass: false,
			allowAnonymousFunction: false,
			allowLiteral: false,
			allowObject: false,
		},
	],
	'import/exports-last': ['off'],
	'import/group-exports': ['off'],
	'import/no-default-export': ['off'],
	'import/no-named-export': ['off'],
	'import/no-self-import': ['error'],
	'import/no-cycle': [
		'error',
		{
			maxDepth: '∞',
			ignoreExternal: false,
			allowUnsafeDynamicCyclicDependency: false,
			disableScc: false,
		},
	],
	'import/no-useless-path-segments': [
		'error',
		{
			commonjs: true,
		},
	],
	'import/dynamic-import-chunkname': [
		'off',
		{
			importFunctions: {},
			webpackChunknameFormat: '[0-9a-zA-Z-_/.]+',
		},
	],
	'import/no-relative-parent-imports': ['off'],
	'import/no-unused-modules': [
		'off',
		{
			ignoreExports: {},
			missingExports: true,
			unusedExports: true,
		},
	],
	'import/no-import-module-exports': ['error'],
	'import/no-relative-packages': ['error'],
	'no-class-assign': ['error'],
	'no-duplicate-imports': ['off'],
	'no-restricted-exports': [
		'error',
		{
			restrictedNamedExports: ['default', 'then'],
		},
	],
	'no-restricted-imports': [
		'off',
		{
			paths: {},
			patterns: {},
		},
	],
	'no-useless-computed-key': ['error'],
	'no-useless-rename': [
		'error',
		{
			ignoreDestructuring: false,
			ignoreImport: false,
			ignoreExport: false,
		},
	],
	'object-shorthand': [
		'error',
		'always',
		{
			ignoreConstructors: false,
			avoidQuotes: true,
		},
	],
	'prefer-arrow-callback': [
		'error',
		{
			allowNamedFunctions: false,
			allowUnboundThis: true,
		},
	],
	'prefer-numeric-literals': ['error'],
	'prefer-reflect': ['off'],
	'prefer-template': ['error'],
	'require-yield': ['error'],
	'sort-imports': [
		'off',
		{
			ignoreCase: false,
			ignoreDeclarationSort: false,
			ignoreMemberSort: false,
			memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],
		},
	],
	'symbol-description': ['error'],
	'init-declarations': ['off'],
	'no-catch-shadow': ['off'],
	'no-delete-var': ['error'],
	'no-label-var': ['error'],
	'no-restricted-globals': [
		'error',
		{
			name: 'isFinite',
			message: 'Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite',
		},
		{
			name: 'isNaN',
			message: 'Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan',
		},
		'addEventListener',
		'blur',
		'close',
		'closed',
		'confirm',
		'defaultStatus',
		'defaultstatus',
		'event',
		'external',
		'find',
		'focus',
		'frameElement',
		'frames',
		'history',
		'innerHeight',
		'innerWidth',
		'length',
		'location',
		'locationbar',
		'menubar',
		'moveBy',
		'moveTo',
		'name',
		'onblur',
		'onerror',
		'onfocus',
		'onload',
		'onresize',
		'onunload',
		'open',
		'opener',
		'opera',
		'outerHeight',
		'outerWidth',
		'pageXOffset',
		'pageYOffset',
		'parent',
		'print',
		'removeEventListener',
		'resizeBy',
		'resizeTo',
		'screen',
		'screenLeft',
		'screenTop',
		'screenX',
		'screenY',
		'scroll',
		'scrollbars',
		'scrollBy',
		'scrollTo',
		'scrollX',
		'scrollY',
		'self',
		'status',
		'statusbar',
		'stop',
		'toolbar',
		'top',
	],
	'no-shadow-restricted-names': ['error'],
	'no-undef-init': ['error'],
	'no-undefined': ['off'],
	'capitalized-comments': [
		'off',
		'never',
		{
			line: {
				ignorePattern: '.*',
				ignoreInlineComments: true,
				ignoreConsecutiveComments: true,
			},
			block: {
				ignorePattern: '.*',
				ignoreInlineComments: true,
				ignoreConsecutiveComments: true,
			},
		},
	],
	'consistent-this': ['off'],
	'func-name-matching': [
		'off',
		'always',
		{
			includeCommonJSModuleExports: false,
			considerPropertyDescriptor: true,
		},
	],
	'func-names': ['warn'],
	'func-style': ['off', 'expression'],
	'id-denylist': ['off'],
	'id-length': ['off'],
	'id-match': ['off'],
	'line-comment-position': [
		'off',
		{
			position: 'above',
			ignorePattern: '',
			applyDefaultPatterns: true,
		},
	],
	'lines-around-directive': [
		'error',
		{
			before: 'always',
			after: 'always',
		},
	],
	'max-depth': ['off', 4],
	'max-lines': [
		'off',
		{
			max: 300,
			skipBlankLines: true,
			skipComments: true,
		},
	],
	'max-lines-per-function': [
		'off',
		{
			max: 50,
			skipBlankLines: true,
			skipComments: true,
			IIFEs: true,
		},
	],
	'max-nested-callbacks': ['off'],
	'max-params': ['off', 3],
	'max-statements': ['off', 10],
	'multiline-comment-style': ['off', 'starred-block'],
	'new-cap': [
		'error',
		{
			newIsCap: true,
			newIsCapExceptions: [],
			capIsNew: false,
			capIsNewExceptions: ['Immutable.Map', 'Immutable.Set', 'Immutable.List'],
			properties: true,
		},
	],
	'newline-after-var': ['off'],
	'newline-before-return': ['off'],
	'no-bitwise': ['error'],
	'no-continue': ['error'],
	'no-inline-comments': ['off'],
	'no-lonely-if': ['error'],
	'no-multi-assign': ['error'],
	'no-negated-condition': ['off'],
	'no-nested-ternary': ['error'],
	'no-new-object': ['error'],
	'no-plusplus': ['error'],
	'no-ternary': ['off'],
	'no-unneeded-ternary': [
		'error',
		{
			defaultAssignment: false,
		},
	],
	'one-var': ['error', 'never'],
	'operator-assignment': ['error', 'always'],
	'padding-line-between-statements': ['off'],
	'prefer-exponentiation-operator': ['error'],
	'prefer-object-spread': ['error'],
	'require-jsdoc': ['off'],
	'sort-keys': [
		'off',
		'asc',
		{
			caseSensitive: false,
			natural: true,
		},
	],
	'sort-vars': ['off'],
	'spaced-comment': [
		'error',
		'always',
		{
			line: {
				exceptions: ['-', '+'],
				markers: ['=', '!', '/'],
			},
			block: {
				exceptions: ['-', '+'],
				markers: ['=', '!', ':', '::'],
				balanced: true,
			},
		},
	],
	'callback-return': ['off'],
	'global-require': ['error'],
	'handle-callback-err': ['off'],
	'no-buffer-constructor': ['error'],
	'no-mixed-requires': ['off', false],
	'no-new-require': ['error'],
	'no-path-concat': ['error'],
	'no-process-exit': ['off'],
	'no-restricted-modules': ['off'],
	'no-sync': ['off'],
	'for-direction': ['error'],
	'no-async-promise-executor': ['error'],
	'no-await-in-loop': ['error'],
	'no-compare-neg-zero': ['error'],
	'no-cond-assign': ['error', 'always'],
	'no-constant-condition': ['warn'],
	'no-control-regex': ['error'],
	'no-debugger': ['error'],
	'no-dupe-else-if': ['error'],
	'no-duplicate-case': ['error'],
	'no-empty': ['error'],
	'no-empty-character-class': ['error'],
	'no-ex-assign': ['error'],
	'no-extra-boolean-cast': ['error'],
	'no-inner-declarations': ['error'],
	'no-invalid-regexp': ['error'],
	'no-irregular-whitespace': ['error'],
	'no-misleading-character-class': ['error'],
	'no-promise-executor-return': ['error'],
	'no-prototype-builtins': ['error'],
	'no-regex-spaces': ['error'],
	'no-sparse-arrays': ['error'],
	'no-template-curly-in-string': ['error'],
	'no-unreachable-loop': ['error'],
	'no-unsafe-finally': ['error'],
	'no-unsafe-optional-chaining': [
		'error',
		{
			disallowArithmeticOperators: true,
		},
	],
	'no-unused-private-class-members': ['off'],
	'no-useless-backreference': ['error'],
	'no-negated-in-lhs': ['off'],
	'require-atomic-updates': ['off'],
	'use-isnan': ['error'],
	'valid-jsdoc': ['off'],
	'accessor-pairs': ['off'],
	'array-callback-return': [
		'error',
		{
			allowImplicit: true,
			checkForEach: false,
			allowVoid: false,
		},
	],
	'block-scoped-var': ['error'],
	complexity: ['off', 20],
	'consistent-return': ['error'],
	'default-case': [
		'error',
		{
			commentPattern: '^no default$',
		},
	],
	'default-case-last': ['error'],
	eqeqeq: [
		'error',
		'always',
		{
			null: 'ignore',
		},
	],
	'grouped-accessor-pairs': ['error'],
	'guard-for-in': ['error'],
	'no-alert': ['warn'],
	'no-caller': ['error'],
	'no-case-declarations': ['error'],
	'no-constructor-return': ['error'],
	'no-div-regex': ['off'],
	'no-else-return': [
		'error',
		{
			allowElseIf: false,
		},
	],
	'no-empty-pattern': ['error'],
	'no-eq-null': ['off'],
	'no-eval': ['error'],
	'no-extend-native': ['error'],
	'no-extra-bind': ['error'],
	'no-extra-label': ['error'],
	'no-fallthrough': ['error'],
	'no-global-assign': [
		'error',
		{
			exceptions: [],
		},
	],
	'no-native-reassign': ['off'],
	'no-implicit-coercion': [
		'off',
		{
			boolean: false,
			number: true,
			string: true,
			allow: {},
		},
	],
	'no-implicit-globals': ['off'],
	'no-invalid-this': ['off'],
	'no-iterator': ['error'],
	'no-labels': [
		'error',
		{
			allowLoop: false,
			allowSwitch: false,
		},
	],
	'no-lone-blocks': ['error'],
	'no-multi-str': ['error'],
	'no-new': ['error'],
	'no-new-wrappers': ['error'],
	'no-nonoctal-decimal-escape': ['error'],
	'no-octal': ['error'],
	'no-octal-escape': ['error'],
	'no-proto': ['error'],
	'no-restricted-properties': [
		'error',
		{
			object: 'arguments',
			property: 'callee',
			message: 'arguments.callee is deprecated',
		},
		{
			object: 'global',
			property: 'isFinite',
			message: 'Please use Number.isFinite instead',
		},
		{
			object: 'self',
			property: 'isFinite',
			message: 'Please use Number.isFinite instead',
		},
		{
			object: 'window',
			property: 'isFinite',
			message: 'Please use Number.isFinite instead',
		},
		{
			object: 'global',
			property: 'isNaN',
			message: 'Please use Number.isNaN instead',
		},
		{
			object: 'self',
			property: 'isNaN',
			message: 'Please use Number.isNaN instead',
		},
		{
			object: 'window',
			property: 'isNaN',
			message: 'Please use Number.isNaN instead',
		},
		{
			property: '__defineGetter__',
			message: 'Please use Object.defineProperty instead.',
		},
		{
			property: '__defineSetter__',
			message: 'Please use Object.defineProperty instead.',
		},
		{
			object: 'Math',
			property: 'pow',
			message: 'Use the exponentiation operator (**) instead.',
		},
	],
	'no-return-assign': ['error', 'always'],
	'no-script-url': ['error'],
	'no-self-assign': [
		'error',
		{
			props: true,
		},
	],
	'no-self-compare': ['error'],
	'no-sequences': ['error'],
	'no-unmodified-loop-condition': ['off'],
	'no-unused-labels': ['error'],
	'no-useless-call': ['off'],
	'no-useless-catch': ['error'],
	'no-useless-concat': ['error'],
	'no-useless-escape': ['error'],
	'no-useless-return': ['error'],
	'no-warning-comments': [
		'off',
		{
			terms: ['todo', 'fixme', 'xxx'],
			location: 'start',
		},
	],
	'no-with': ['error'],
	'prefer-promise-reject-errors': [
		'error',
		{
			allowEmptyReject: true,
		},
	],
	'prefer-named-capture-group': ['off'],
	'prefer-regex-literals': [
		'error',
		{
			disallowRedundantWrapping: true,
		},
	],
	radix: ['error'],
	'require-unicode-regexp': ['off'],
	'vars-on-top': ['error'],
	yoda: ['error'],
	'@typescript-eslint/no-shadow': ['off'],
};
